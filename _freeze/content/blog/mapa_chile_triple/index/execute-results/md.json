{
  "hash": "6d220b0d10fb04a49dc92e1de3ae26b2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Visualizar un mapa de Chile separado en tres secciones\nauthor: Basti치n Olea Herrera\ndate: '2025-10-23'\nfreeze: true\nslug: []\ncategories: []\ntags:\n  - mapas\nformat:\n  hugo-md:\n    output-file: index\n    output-ext: md\nlinks:\n  - icon: github\n    icon_pack: fab\n    name: C칩digo\n    url: https://gist.github.com/bastianolea/52259ec4964891b2d11c5ad59c010246\nexcerpt: \"Como Chile es un pa칤s tan largo, a veces cuesta publicar mapas que se vean bien por el espacio que requiere. En otro post [intentamos resolver esto girando Chile para que quede horizontal o _acostado_](/blog/mapa_chile_horizontal/). Ahora veremos otra opci칩n: partir Chile en tres secciones, norte centro y sur, que podemos disponer lado a lado para ocupar mejor el espacio.\"\n---\n\n{{< imagen \"mapa_chile_tres_featured.png\" >}}\n\n\n\n\nComo Chile es un pa칤s tan largo, a veces cuesta publicar mapas que se vean bien por el espacio que requiere. En otro post [intentamos resolver esto girando Chile para que quede horizontal o _acostado_](/blog/mapa_chile_horizontal/). Ahora veremos otra opci칩n: partir Chile en tres secciones, norte centro y sur, que podemos disponer lado a lado para ocupar mejor el espacio.\n\n\n\n{{< indice >}}\n\n\n\n\n## Descargar mapas\n\nEn el siguiente bot칩n descargaremos un _shapefile_ de Chile por regiones, que proviene de la [Mapoteca de la Biblioteca del Congreso Nacional](https://www.bcn.cl/siit/mapas_vectoriales). Tambi칠n puedes descargarlo en el script con `download.file()`.\n\n{{< boton \"Division regional: pol칤gonos de las regiones de Chile\" \"https://www.bcn.cl/obtienearchivo?id=repositorio/10221/10398/2/Regiones.zip\" \"fas fa-map\">}}\n\nUna vez descargado, descomprimimos el archivo (podemos usar `unzip()`) y obtendremos una **carpeta**. Como siempre, es importante que estemos trabajando en un [proyecto de RStudio](/blog/r_introduccion/proyectos/), y que guardemos los datos y _shapes_ dentro de la carpeta del proyecto. \n\nPuedes hacer esto mediante c칩digo: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# descargar\ndownload.file(\"https://www.bcn.cl/obtienearchivo?id=repositorio/10221/10398/2/Regiones.zip\",\n              \"Regiones.zip\")\n\n# descomprimir\nunzip(\"Regiones.zip\", exdir = \"Regiones\")\n```\n:::\n\n\n\n\n## Cargar mapa\n\nCargamos el _shape_ con la funci칩n `read_sf()` [del paquete `{sf}`](/blog/mapas_sf/). Si es tu primera vez haciendo mapas, revisa [esta gu칤a](/blog/mapas_sf/). \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\n\nmapa <- read_sf(\"Regiones\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n## Visualizar mapa\n\nPrimero veamos el mapa tal como viene desde el _shapefile_:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nmapa |> \n  ggplot() +\n  geom_sf() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index.markdown_strict_files/figure-markdown_strict/unnamed-chunk-2-1.png){width=768}\n:::\n:::\n\n\n\nAqu칤 se nota al tiro el problema: el pa칤s es tan delgado y alto 游삕 que si contamos con poco espacio vertical, no se notan los detalles y dejamos m치rgenes sin uso.\n\nSi la visualizaci칩n se demora mucho en generar en tu computador, prueba [simplificando los detalles del mapa.](/blog/simplificar_mapas/)\n\n## Cortar mapa de Chile continental\n\nUn primer ajuste para la visualizaci칩n es cortar los m치rgenes del mapa para enfocarnos en Chile _continental_. Perd칩n, Rapa Nui 游땞\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmapa |> \n  # reproyectar\n  st_transform(crs = 5360) |> \n  # visualizar\n  ggplot() +\n  geom_sf() +\n  # recortar Chile continental\n  coord_sf(expand = FALSE,\n           xlim = c(-79, -62),\n           ylim = c(-56.2, -17.3)) +\n  theme_minimal(base_size = 8)\n```\n\n::: {.cell-output-display}\n![](index.markdown_strict_files/figure-markdown_strict/unnamed-chunk-3-1.png){width=768}\n:::\n:::\n\n\nUno de los pasos para el recorte fue _reproyectar_ el mapa, dado que vienen con un sistema de coordenadas distinto al que t칤picamente se usa. Al reproyectar, las coordenadas pasan a estar en grados decimales.\n\n## Calcular recortes\n\nAhora toca sacar la calculadora (tambi칠n se puede hace a mano, pero ac치 nos gusta el c칩digo reproducible y sobrecomplejizar todo) 游뱁\n\nLa idea es: medir cu치nto mide cada secci칩n del pa칤s, y calcular los cortes que hay que hacerle al mapa para dividirlo en tres.\n\nPrimero tomamos el l칤mite superior o norte del pa칤s, y el l칤mite sur, y calculamos el _largo_ en t칠rmino de grados de latitud. Dividimos ese largo en tres partes para saber cu치nto va a medir cada una de las tres secciones.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlimite_sur = -56.2\nlimite_norte = -17.3\nlargo = abs(limite_sur) - abs(limite_norte)\n\nparte = largo / 3\n```\n:::\n\n\n\nObtenemos que cada secci칩n medir치 12.9666667 grados de latitud. \n\nSi empezamos desde el norte del pa칤s (`n`, que equivale a -17.3), la primera secci칩n llegar치 hasta `n - parte` (-30.3). Luego la segunda secci칩n empieza donde termina la anterior, y llega hasta `n - parte*2` (-43), y la tercera secci칩n llegar치 hasta `n - parte*2` (-56.2), que coincide con el l칤mite sur del pa칤s.\n\n| secciones | norte | sur   |\n|-----------|-------|-------|\n|1          | n     | n-p   |\n|2          | n-p   | n-p*2 |\n|3          | n-p*2 | n-p*3 |\n\nPodemos calcular esto a mano, o hacerlo _al ojo_, pero vamos a creamor una tablita mejor.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\ncortes <- tibble(secciones = c(1, 2, 3))\n\ncortes <- cortes |> \n  mutate(norte = limite_norte,\n         sur = limite_norte)\n\ncortes\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 칑 3\n  secciones norte   sur\n      <dbl> <dbl> <dbl>\n1         1 -17.3 -17.3\n2         2 -17.3 -17.3\n3         3 -17.3 -17.3\n```\n\n\n:::\n\n```{.r .cell-code}\ncortes <- cortes |> \n  mutate(norte = norte - (parte * (secciones - 1)),\n         sur   = sur - (parte * secciones))\n\ncortes\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 칑 3\n  secciones norte   sur\n      <dbl> <dbl> <dbl>\n1         1 -17.3 -30.3\n2         2 -30.3 -43.2\n3         3 -43.2 -56.2\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n| secciones|     norte|       sur|\n|---------:|---------:|---------:|\n|         1| -17.30000| -30.26667|\n|         2| -30.26667| -43.23333|\n|         3| -43.23333| -56.20000|\n\n\n:::\n:::\n\n\n\n## Cortar mapas\n\nCreamos un mapa base, y definimos un objeto que contiene los cortes horizontales, que en este caso ser치n iguales para los tres mapas.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmapa_base <- mapa |> \n  # reproyectar\n  st_transform(crs = 5360) |> \n  # visualizar\n  ggplot() +\n  geom_sf() +\n  theme_minimal(base_size = 8)\n\nlimites_continental <- c(-78, -64)\n```\n:::\n\n\n\nAhora, usando el `mapa_base`, aplicamos el corte de coordenadas con `coors_sf()` a partir de la tabla `cortes`, seleccionando la columna de la tabla que corresponde (norte o sur), y la posici칩n del elemento para cada secci칩n (1, 2 o 3).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmapa_norte <- mapa_base +\n  coord_sf(expand = FALSE,\n           xlim = limites_continental,\n           ylim = c(cortes$norte[1], cortes$sur[1]))\n\nmapa_centro <- mapa_base +\n  coord_sf(expand = FALSE,\n           xlim = limites_continental,\n           ylim = c(cortes$norte[2], cortes$sur[2]))\n\nmapa_sur <- mapa_base +\n  coord_sf(expand = FALSE,\n           xlim = limites_continental,\n           ylim = c(cortes$norte[3], cortes$sur[3]))\n```\n:::\n\n\n\n\n## Unir mapas\n\nEl paso final es **unir** los tres gr치ficos: [como detallamos en un post anterior](/blog/patchwork/), con el paquete [`{patchwork}`](https://patchwork.data-imaginist.com/articles/patchwork.html) podemos unir y combinar gr치ficos de `{ggplot2}`, y la sintaxis es muy simple: si conectas los gr치ficos con el signo `+` se unir치n lado a lado, si los _divides_ con `/` aparecer치n uno sobre otro. Con el signo `&` puedes agregar capas a todos los gr치ficos de una.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\n\nmapa_norte + mapa_centro + mapa_sur + \n  plot_annotation(title = \"Mapa de Chile\",\n       subtitle = \"dividido en tres secciones\") &\n  theme(axis.text.x = element_blank())\n```\n\n::: {.cell-output-display}\n![](index.markdown_strict_files/figure-markdown_strict/unnamed-chunk-9-1.png){width=1800}\n:::\n:::\n\n\n\nListo! Ahora el mapa cabe mucho mejor en una hoja, p치gina o imagen.\n\nTambi칠n podemos ajustar los cortes horizontales del mapa, para que cada secci칩n tenga un espaciado similar. Ac치 dejo el c칩digo con los n칰meros exactos para copiar y pegar, o bien, [revisa el script completo en este Gist.](https://gist.github.com/bastianolea/52259ec4964891b2d11c5ad59c010246)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmapa_norte <- mapa_base +\n  coord_sf(expand = FALSE,\n           xlim = c(-74, -65),\n           ylim = c(-17.3, -30.2))\n\nmapa_centro <- mapa_base +\n  coord_sf(expand = FALSE,\n           xlim = c(-76, -68),\n           ylim = c(-30.2, -43.2))\n\nmapa_sur <- mapa_base +\n  coord_sf(expand = FALSE,\n           xlim = c(-78, -65),\n           ylim = c(-43.2, -56.2))\n\nmapa_norte + mapa_centro + mapa_sur + \n  plot_annotation(title = \"Mapa de Chile\",\n       subtitle = \"dividido en tres secciones\") &\n  theme(axis.text.x = element_blank())\n```\n\n::: {.cell-output-display}\n![](index.markdown_strict_files/figure-markdown_strict/unnamed-chunk-10-1.png){width=768}\n:::\n:::",
    "supporting": [
      "index.markdown_strict_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}