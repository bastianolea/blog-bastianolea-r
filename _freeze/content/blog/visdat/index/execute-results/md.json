{
  "hash": "75c4474d5c0e80a3faa52a419c29a57d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Echa un vistazo preliminar a tus datos con {visdat}\nauthor: Bastián Olea Herrera\ndate: '2025-08-08'\nfreeze: true\nslug: []\ncategories: []\ntags:\n  - visualización de datos\n  - datos perdidos\n  - limpieza de datos\n  - consejos\nexcerpt: El paquete `{visdat}` tiene funciones para visualizar tus conjuntos de datos completos, para poder entenderlos de manera visual antes de proseguir con la limpieza o análisis. El paquete entrega varias funciones `vis_x()` para visualzar la tabla de datos entera, destacando distintos aspectos de la misma. En este post muestro ejemplos de uso de este paquete para encontrar datos perdidos, explorar datos, y más.\n---\n\n\n\nEn una clase reciente me preguntaron [cómo saber de una dónde hay datos perdidos o _missing_](/blog/2025-10-21/) en un conjunto de datos. La respuesta que di fue usar `summarize()` para contar la cantidad de datos perdidos en todas las columnas de un dataframe:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr) # manipulación de datos\nlibrary(messy) # ensuciar datos\n\n# agregar datos perdidos al azar\niris_m <- iris |> \n  messy::make_missing(cols = names(iris))\n\niris_m |> \n  # resumir los datos\n  summarize(\n    # en todas las columnas\n    across(everything(),\n           # contar la cantidad de missing\n           ~sum(is.na(.x))\n           )\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1           12          21           16          21      11\n```\n\n\n:::\n:::\n\n\n\nPero hay formas más convenientes de hacerlo!\n\n----\n\n[El paquete `{visdat}`](https://github.com/ropensci/visdat) tiene funciones para visualizar tus conjuntos de datos completos, para poder entenderlos de manera visual antes de proseguir con la limpieza o análisis. El paquete entrega varias funciones `vis_x()` para visualzar la tabla de datos entera, destacando distintos aspectos de la misma.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"visdat\")\nlibrary(visdat)\n```\n:::\n\n\n\nEn [este post de ROpenSci](https://ropensci.org/blog/2017/08/22/visdat/) hay una reseña más completa del paquete, pero te dejo ejemplos útiles a continuación:\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## Visualizar datos perdidos\n\nPara visualizar si es que hay datos perdidos en nuestro dataframe, y además saber _dónde_ están esos datos perdidos, usamos la función `vis_miss()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvis_miss(iris_m)\n```\n\n::: {.cell-output-display}\n![](index.markdown_strict_files/figure-markdown_strict/unnamed-chunk-4-1.png){width=768}\n:::\n:::\n\n\n\n`{visdat}` nos muestra visualmente toda la tabla de datos como un rectángulo, destacando los datos perdidos. ¡Súper útil!\n\nCon el argumento `cluster` podemos agrupar los datos perdidos para tener una mejor noción de la proporción en cada columna.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvis_miss(iris_m, cluster = TRUE)\n```\n\n::: {.cell-output-display}\n![](index.markdown_strict_files/figure-markdown_strict/unnamed-chunk-5-1.png){width=768}\n:::\n:::\n\n\n\n## Visualizar el tipo de las columnas\n\nCon `vis_dat()` vemos con colores distintos las columnas que corresponden a tipos distintos (numérico, caracter, factor, etc.)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvis_dat(iris)\n```\n\n::: {.cell-output-display}\n![](index.markdown_strict_files/figure-markdown_strict/unnamed-chunk-6-1.png){width=768}\n:::\n:::\n\n\n\n## Visualizar los valores de las variables numéricas\n\nPara explorar los datos de tipo numérico, podemos usar `vis_value()` para visualizar con una escala de colores los valores de cada columna, dándonos una noción sobre las cifras dentro de nuestra tabla:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n  select(where(is.numeric)) |> \n  vis_value()\n```\n\n::: {.cell-output-display}\n![](index.markdown_strict_files/figure-markdown_strict/unnamed-chunk-7-1.png){width=768}\n:::\n:::\n\n\n\n## Visualizar valores numéricos que cumplan una condición\n\nPara indagar en los datos numéricos, podemos entregar una condición dentro de una función lambda para aplicarla a todas las columnas y visualizar los resultados:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvis_expect(iris, ~.x >= 5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in Ops.factor(.x, 5): '>=' not meaningful for factors\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index.markdown_strict_files/figure-markdown_strict/unnamed-chunk-8-1.png){width=768}\n:::\n:::\n\n{{< cafecito >}}\n\n\n{{< cursos >}}\n",
    "supporting": [
      "index.markdown_strict_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}