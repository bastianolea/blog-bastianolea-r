{
  "hash": "547e6eb1dcbcc9ff54365d5273fe203c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Validación básica de datos con R'\nauthor: Bastián Olea Herrera\ndate: '2025-08-07'\nslug: []\nfreeze: true\ncategories: []\nformat:\n  hugo-md:\n    output-file: \"index\"\n    output-ext: \"md\"\ntags:\n  - procesamiento de datos\n  - consejos\n  - automatización\n  - control de flujo\n  - funciones\nexcerpt: Si estás procesando muchos datos y/o datos que vienen de distintas fuentes con R, validarlos puede ayudarte a encontrar problemas antes de que sea tarde! ¿Qué es la validación de datos? Son las distintas pruebas que crearemos para confirmar que nuestros datos cumplen ciertos criterios. El objetivo es entregarnos la certeza de que nuestros datos son como esperamos luego de procesarlos. Para lograrlo, ponemos a prueba nuestros datos en distintos puntos de nuestros procesos de análisis de datos.\n---\n\n{{< indice >}}\n\n\n\n\nSi estás procesando muchos datos y/o datos que vienen de distintas fuentes con R, validarlos puede ayudarte a encontrar problemas antes de que sea tarde! 😱\n\n¿Qué es la validación de datos? Son las distintas pruebas que crearemos para **confirmar que nuestros datos cumplen ciertos criterios**. El objetivo es entregarnos la **certeza** de que nuestros datos son como esperamos luego de procesarlos. Para lograrlo, ponemos a prueba nuestros datos en distintos puntos de nuestros procesos de análisis de datos.\n\nPor ejemplo: luego de cargar un conjunto de datos a R y realizar una limpieza básica, ¿realmente los datos quedaron como debían quedar? \n\n- ¿Tenemos datos perdidos en variables donde no esperamos que los hayan?\n- ¿La tabla tiene la cantidad de filas esperadas?\n- En una variable numérica, ¿existen observaciones que se salen del rango esperable? Como años en el futuro, edades imposibles, etc.\n- Las columnas que contienen números, ¿son realmente numéricas, o hay texto en algunas celdas escurridizas?\n- ¿Las variables categóricas o de texto están bien escritas, o vienen cosas repetidas en minúsculas y otras en mayúsculas?\n- ¿Una variable categórica contiene exactamente las categorías posibles, o tiene más o menos que las esperadas?\n\nÉste tipo de revisiones las hacemos generalmente de forma manual mientras exploramos los datos. Pero la idea de la validación de datos es que **formalicemos estas pruebas** para poder **aplicarlas en distintos momentos, y a distintos conjuntos de datos.**\n\n## Validación básica\n\nEn el fondo, una validación no es más que evaluar una expresión condicional para ver si se cumple o no se cumple. Creemos un conjunto de datos de prueba:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\nanimales <- tribble(~animal,  ~patas, ~lindura,   ~color,\n                    \"mapache\",     4,      100,   \"gris\",\n                    \"gato\",       80,       90,  \"negro\",\n                    \"gallina\",     2,       NA, \"plumas\")\n```\n:::\n\n\n\nPara validar los datos, puedes usar expresiones `if`s para crear **pruebas que revisan si tus resultados cumplen con criterios mínimos**, como contener ciertas columnas, que no hayan datos perdidos, o lo que necesites. \n\nCreemos una expresión condicional para revisar si es que nuestra tabla de datos tiene **al menos una observación**:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# validar si el dataframe tiene filas\nif (nrow(animales) > 0) {\n  message(\"tabla con filas!\")\n} else {\n  warning(\"tabla sin filas\")\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntabla con filas!\n```\n\n\n:::\n:::\n\n\nCon este código confirmamos que los datos cumplen con este criterio mínimo. Si modificamos los datos y probamos de nuevo, la validación nos avisará que hay un problema con los datos:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# modificar el dataframe y ver si sigue cumpliendo\nanimales2 <- animales |> filter(patas == 0)\n\nif (nrow(animales2) > 0) {\n  message(\"tabla con filas!\")\n} else {\n  warning(\"tabla sin filas :(\")\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: tabla sin filas :(\n```\n\n\n:::\n:::\n\n\n\nSiguiendo la misma idea, podemos crear otras validaciones para confirmar que los datos vienen como esperamos:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# revisar que no hayan datos perdidos en columna `lindura`\nif (sum(is.na(animales$lindura)) == 0) {\n  message(\"sin datos perdidos en variable `lindura`\")\n} else {\n  stop(\"datos perdidos en variable `lindura`, ¿acaso demasiada lindura?\")\n}\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: datos perdidos en variable `lindura`, ¿acaso demasiada lindura?\n```\n\n\n:::\n\n```{.r .cell-code}\n# revisar que variable `patas` no tenga observaciones fuera del rango posible\nif (all(between(animales$patas, 2, 8))) {\n  message(\"cantidad de patas aceptable\")\n} else {\n  stop(\"demasiadas patas!\")\n}\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: demasiadas patas!\n```\n\n\n:::\n\n```{.r .cell-code}\n# revisar que los valores de `colores` sean válidos\nif (all(animales$color %in% c(\"verde\", \"negro\", \"café\", \"gris\", \"blanco\"))) {\n  message(\"colores aceptables\")\n} else {\n  stop(\"variable colores tiene datos fuera de lo esperado\")\n}\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: variable colores tiene datos fuera de lo esperado\n```\n\n\n:::\n:::\n\n\n\nAl ejecutar esta validaciones obtenemos mensajes que nos indican el estado de los datos, o su calidad.\n\nDentro de las condicionales puedes agregar `warning()` o `message()` para recibir avisos en tu consola dependiendo de lo que se obtiene en cada prueba. También puedes usar `stop()` para que **detener la ejecución** si la validación sale negativa, en el caso de que sea muy importante de resolver el problema con los datos de manera inmediata en vez de continuar con el flujo de procesamiento. \n\nOtra alternativa para crear validaciones es usar la función `stopifnot()`, a la que le entregamos una condición que esperamos que se cumpla, y si no se cumple, la ejecución se detiene:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstopifnot(\"valores perdidos\" = is.na(animales$lindura))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: valores perdidos\n```\n\n\n:::\n:::\n\n\nLa diferencia es que con `stopifnot()` tenemos menos control sobre qué hacer cuando se cumple o no se cumple la condición, y solamente te avisa si es que no se cumple.\n\n## Funciones de validación\n\nEl siguiente paso es reunir todas estas pruebas en una sola función, para que puedas reutilizarla en distintas versiones de la tabla, y en distintos conjuntos de datos.\n\nCreamos una función con `function()`, donde el argumento `data` va a representar el conjunto de datos que pasemos a la función.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrevisar <- function(data) {\n  \n  # prueba de filas\n  if (nrow(data) > 0) {\n    message(\"filas ok\") \n  } else {\n    warning(\"tabla sin filas\")\n  }\n  \n  # prueba de perdidos\n  if (any(is.na(data$lindura))) {\n    warning(\"datos perdidos\")\n  } else {\n    message(\"sin datos perdidos\")\n  }\n  \n  # prueba de rangos\n  if (all(between(data$patas, 2, 8))) {\n    message(\"rango aceptable\")\n  } else {\n    warning(\"datos fuera de rango\")\n  }\n  \n  # prueba de valores categóricos\n  if (all(data$color %in% c(\"verde\", \"negro\", \"café\", \"rosado\", \"gris\", \"blanco\"))) {\n    message(\"valores esperados\")\n  } else {\n    warning(\"valores inesperados\")\n  }\n}\n```\n:::\n\n\n\nAhora podemos aplicar la función a los datos para validarlos en cualquier momento:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrevisar(animales)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nfilas ok\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in revisar(animales): datos perdidos\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in revisar(animales): datos fuera de rango\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in revisar(animales): valores inesperados\n```\n\n\n:::\n:::\n\n\n\nPodemos corregir los datos y volver a aplicar la validación para confirmar que ahora están correctos:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# corregir datos luego de las pruebas\nanimales_3 <- animales |> \n  filter(patas <= 8) |> \n  mutate(color = recode(color, \"plumas\" = \"blanco\")) |> \n  mutate(lindura = if_else(is.na(lindura), 0, lindura))\n\n# validar\nrevisar(animales_3)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nfilas ok\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nsin datos perdidos\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nrango aceptable\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nvalores esperados\n```\n\n\n:::\n:::\n\n\n\nFinalmente, podemos volver a aplicar la validación a un conjunto de datos actualizado o una versión distinta de una tabla con las mismas características:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimales_4 <- tribble(~animal,  ~patas, ~lindura,    ~color,\n                      \"perro\",       4,       50,    \"café\",\n                     \"ratita\",       3,       99,    \"café\",\n                    \"chancho\",       4,       70,  \"rosado\",\n                      \"araña\",       8,     -100,   \"negro\")\n\nanimales_4 |> revisar()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nfilas ok\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nsin datos perdidos\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nrango aceptable\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nvalores esperados\n```\n\n\n:::\n\n```{.r .cell-code}\nanimales_4 |> filter(lindura > 50) |> revisar()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nfilas ok\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nsin datos perdidos\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nrango aceptable\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nvalores esperados\n```\n\n\n:::\n:::\n\n\n\nEstas pequeñas buenas prácticas te van a ayudar a reducir la incertidumbre en rutinas largas de procesamiento de datos!\n\n## Validación avanzada\n[El paquete de R `{pointblank}`](https://rstudio.github.io/pointblank/) se especializa en validación de datos, así que si requieres algo más avanzado para garantizar la calidad de tus datos y la estabilidad de tus procesos, [revisa este post con un tutorial!](/blog/validacion_avanzada/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}