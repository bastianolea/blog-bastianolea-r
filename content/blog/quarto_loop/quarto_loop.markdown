---
title: Generar contenido en serie usando loops en un reporte Quarto
author: Basti√°n Olea Herrera
date: '2025-06-08'
draft: true
slug: []
categories: []
format:
  hugo-md:
    output-file: "index"
    output-ext: "md"
tags:
  - quarto
  - loops
  - automatizaci√≥n
  - gr√°ficos
---




Una de las gracias de generar documentos en Quarto es que podemos combinar la redacci√≥n con el c√≥digo. Pero esto puede ir m√°s all√° que simplemente escribir un p√°rrafo de texto y seguido de un p√°rrafo de c√≥digo. Podemos usar c√≥digo para literalmente generar texto, t√≠tulos y m√°s. 

En otros tutoriales vimos c√≥mo podemos [incluir resultados del c√≥digo dentro de nuestros p√°rrafos de texto](/blog/quarto_reportes/#c√≥digo-entre-el-texto), por ejemplo, para que una cifra que est√© dentro de una oraci√≥n venga directamente del resultado de un c√°lculo en vez de tener que escribirle de forma manual. Pero en esta gu√≠a vamos a ver c√≥mo podemos programar la generaci√≥n masiva de t√≠tulos, p√°rrafos y gr√°ficos en base a una [iteraci√≥n, bucle o _loop_.](/blog/r_introduccion/r_intermedio/#bucles)

## Generar contenido del reporte desde loops

Dentro de un _chunk_ de c√≥digo, podemos usar funciones que entreguen como output c√≥digo markdown. Esto nos servir√° para construir un documento a partir de un loop o iteraci√≥n. De este modo, podemos usar nuestros datos para generar una cantidad indeterminada de t√≠tulos, subt√≠tulos, p√°rrafos de textos, gr√°ficos o m√°s, que se generar√°n autom√°ticamente. 

Usaremos el paquete `{pander}` para que el chunk de R retorne contenido en Markdown que Quarto interpretar√° como parte del documento gracias a la opci√≥n `#| results: asis` que tenemos que definir al principio del chunk:




``` r
library(dplyr)
```

```
## 
## Attaching package: 'dplyr'
```

```
## The following objects are masked from 'package:stats':
## 
##     filter, lag
```

```
## The following objects are masked from 'package:base':
## 
##     intersect, setdiff, setequal, union
```

``` r
library(pander)
```



Como primer ejemplo, tendremos un vector que contiene tres elementos de texto. Para generar el contenido de nuestro documento, queremos generar un t√≠tulo y un p√°rrafo por cada elemento de texto del vector. Entonces, hacemos un loop que vaya iterando por cada elemento del vector, y para cada elemento va a crear un t√≠tulo, un peque√±o p√°rrafo, e insertar un emoji:




``` r
animales <- c("gato", "mapache", "castor")

# unir nombres de columnas en un texto
for (animal in animales) {
  
  # crear un t√≠tulo
  pandoc.header(paste("T√≠tulo:", animal), level = 4)
  
  # crear un p√°rrafo
  pandoc.p(
    paste("Este texto fue generado por `{pander}` dentro de un _for loop_ para el animalito", animal)
  )
  
  # poner un animalito
  pandoc.p(
    case_when(animal == "gato"~ "üêà‚Äç‚¨õ",
              animal == "mapache" ~ "ü¶ù",
              animal == "castor" ~ "ü¶´")
  )
}
```


#### T√≠tulo: gato


Este texto fue generado por `{pander}` dentro de un _for loop_ para el animalito gato



üêà‚Äç‚¨õ


#### T√≠tulo: mapache


Este texto fue generado por `{pander}` dentro de un _for loop_ para el animalito mapache



ü¶ù


#### T√≠tulo: castor


Este texto fue generado por `{pander}` dentro de un _for loop_ para el animalito castor



ü¶´




----

Como podemos ver, el contenido anterior se gener√≥ autom√°ticamente como resultado del loop. 

Las funciones `pandoc.header()` y `pandoc.p()` sumadas a la opci√≥n `results: asis` nos ayudan a que el chunk retorne texto en markdown. Usando los mismos principios, podemos programar un loop que vaya retornando t√≠tulos, textos, y m√°s, para que el contenido del documento se vaya escribiendo solo. Si queremos incluir gr√°ficos, tenemos que imprimirlos expl√≠citamente con `plot()`.

En este segundo ejemplo, iteraremos por los valores de una variable de un dataframe (la variable `Species` de `iris`, que tiene 3 valores posibles) y por cada valor crearemos un t√≠tulo, un gr√°fico que destaque dicho valor, y un texto que indique una cifra relacionada al valor. Luego del c√≥digo veremos el contenido resultante, generado de forma autom√°tica:




``` r
library(ggplot2)
library(pander)
library(dplyr)
library(glue) # para pegar texto
library(gghighlight) # para destacar valores en gr√°ficos

# iteraci√≥n
for (especie in unique(iris$Species)) {
  
  # t√≠tulo
  pandoc.header(paste("Especie", especie), level = 3)
  
  # definir color
  color_especie <- case_when(especie == "setosa" ~ "#ff006e",
                             especie == "virginica" ~ "#8338ec",
                             especie == "versicolor" ~ "#3a86ff")
  
  # crear gr√°fico
  grafico <- iris |> 
    ggplot() +
    aes(x = Sepal.Length, y = Sepal.Width) +
    geom_point(size = 3, color = color_especie) +
    theme_void() +
    gghighlight::gghighlight(Species == especie)
  
  # imprimir gr√°fico
  plot(grafico)
  
  # crear texto
  largo_petalo <- iris |> 
    filter(Species == especie) |> 
    slice_max(Petal.Length) |> 
    pull(Petal.Length) |> 
    unique()
  
  # imprimir texto
  pandoc.p(
    # paste("La observaci√≥n m√°s alta en largo de p√©talos en la especie", especie, "es:", largo_petalo)
    glue::glue("La observaci√≥n m√°s alta en largo de p√©talos en la especie **{especie}** es: {largo_petalo}")
  )
  
  # l√≠nea divisoria
  # pandoc.horizontal.rule()
}
```


### Especie setosa
<img src="/blog/quarto_loop/quarto_loop_files/figure-html/unnamed-chunk-3-1.png" width="672" />

La observaci√≥n m√°s alta en largo de p√©talos en la especie **setosa** es: 1.9


### Especie versicolor
<img src="/blog/quarto_loop/quarto_loop_files/figure-html/unnamed-chunk-3-2.png" width="672" />

La observaci√≥n m√°s alta en largo de p√©talos en la especie **versicolor** es: 5.1


### Especie virginica
<img src="/blog/quarto_loop/quarto_loop_files/figure-html/unnamed-chunk-3-3.png" width="672" />

La observaci√≥n m√°s alta en largo de p√©talos en la especie **virginica** es: 6.9



Usando esta t√©cnica podemos producir documentos muy extensos con poco c√≥digo, lo que nos vuelve m√°s eficientes y tambi√©n nos ayuda para actualizar y retocar los reportes, dado que un cambio hecho una sola vez se replica en todos los elementos generados por el loop.

Esto puede sernos √∫til si es que estamos generando un documento en el que estamos presentando resultados y tenemos que repetir varias veces contenido similar para los distintos valores de una variable, o si tenemos que mostrar muchos gr√°ficos similares para distintas variables, etc.

----



{{< cafecito >}}

