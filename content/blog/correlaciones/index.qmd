---
title: An치lisis y visualizaci칩n de correlaciones en R
author: Basti치n Olea Herrera
date: '2025-07-09'
draft: false
format:
  hugo-md:
    fig-format: "jpeg"
    output-file: "index"
    output-ext: "md"
slug: []
categories: 
  - Tutoriales
tags:
  - estad칤sticas
  - ggplot2
  - gr치ficos
  - visualizaci칩n de datos
editor_options: 
  chunk_output_type: console
excerpt: El an치lisis de correlaci칩n es una t칠cnica estad칤stica de an치lisis exploratorio que nos permite identificar si existen relaciones lineales entre distintas variables. En este tutorial aprenderemos a realizar correlaciones entre m칰ltiples variables, interpretarlas, y visualizarlas de tres maneras distintas. 
---

El an치lisis de correlaci칩n es una t칠cnica estad칤stica que nos permite **identificar si existen relaciones lineales entre distintas variables.** 

Lo que hace una correlaci칩n es indicarnos si dos variables tienen una relaci칩n entre s칤, en el sentido de que el aumento o disminuci칩n de una de las variables ocurra en concordancia con la otra variable, ya sea una **correlaci칩n positiva** (si una variable aumenta, la otra tambi칠n) o **correlaci칩n negativa** (si una variable aumenta, la otra disminuye).

Un ejemplo de correlaci칩n positiva ser칤a: mientras m치s solcito, m치s calor. Una correlaci칩n negativa ser칤a: a mayor fr칤o, menos ganas de levantarse 游땺

En R podemos realizar an치lisis de correlaci칩n en conjuntos de datos enteros, y de este modo podemos encontrar todas las correlaciones que existen entre las variables de los datos. Esto se lograr칤a tomando todas las variables y cruz치ndolas todas con todas, para luego identificar cu치les se correlacionan, en qu칠 direcci칩n y con qu칠 intensidad.

## Cargar datos

Para hacer m치s interesante el tutorial, vamos a cargar dos conjuntos de datos sociales, obtenidos de mi [repositorio de datos sociales p칰blicos](https://bastianolea.github.io/datos_sociales/). 

En esta oportunidad cargaremos un conjunto de datos del [Sistema de Informaci칩n Municipal (Sinim)](https://github.com/bastianolea/sinim_info_municipal), que es una base de datos sobre los municipios chilenos mantenida anualmente por la [Subsecretar칤a de Desarrollo Regional y Administrativo (Subdere)](https://datos.sinim.gov.cl), y el conjunto de datos del [Sistema de Indicadores y Est치ndares de Desarrollo Urbano](https://github.com/bastianolea/siedu_indicadores_urbanos/), conjunto desarrollado por el [Instituto Nacional de Estad칤sticas de Chile](https://www.ine.gob.cl/herramientas/portal-de-mapas/siedu) que agrupa estad칤sticas Sobre medio ambiente, planificaci칩n de ciudades, desarrollo sostenible, acceso a servicios b치sicos, y movilidad.

Gracias al [repositorio de datos sociales](https://bastianolea.github.io/datos_sociales/), tenemos enlaces directos a conjuntos de datos sociales listos para usar, y cargarlos a tu sesi칩n de R es tan f치cil como cargar el dato directamente desde internet:

```{r}
#| message: false
library(arrow)

# cargar datos sinim
sinim <- arrow::read_parquet("https://github.com/bastianolea/sinim_datos_comunales/raw/main/datos/sinim_2019-2023.parquet")

# cargar datos de siedu
siedu <- arrow::read_parquet("https://github.com/bastianolea/siedu_indicadores_urbanos/raw/main/datos/siedu_indicadores_desarrollo_urbano.parquet")
```


## Limpieza de datos

Antes que nada, vamos a cargar `{dplyr}` para el manejo y la limpieza de los datos. 

```{r}
#| message: false
library(dplyr)
```

Ech칠mosle un vistazo a los datos con `glimpse()`:

```{r}
glimpse(sinim)

glimpse(siedu)
```
Notamos que ambos conjuntos de datos vienen en el [formato _largo_](https://r4ds.had.co.nz/tidy-data.html#longer), d칩nde tenemos una columna con los nombres de las variables o indicadores, y otra columna con los valores correspondientes. As칤 tenemos una tabla con menor cantidad de columnas,
donde cada fila es una observaci칩n que corresponde a una comuna del pa칤s, en un a침o espec칤fico, para una de las variables del conjunto de datos, con su valor correspondiente.

Haremos tres cosas con los datos: 

1. Primero haremos una selecci칩n de variables interesantes de cada conjunto de datos. 
2. Luego, como ambos conjuntos de datos poseen mediciones de distintos a침os en cada una de sus indicadores o estad칤sticos, realizaremos una agrupaci칩n por comuna y variable para dejar las mediciones m치s recientes en cada indicador y en cada comuna. 
3. Finalmente, dejaremos s칩lo las columnas que nos interesan

```{r}
# filtrar variables
sinim_2 <- sinim |> 
  filter(variable %in% c("Ingresos Propios Permanentes per C치pita (IPPP)",
                         "Disponibilidad Presupuestaria Municipal por Habitante (M$)",
                         "Inversi칩n Municipal",
                         "Participaci칩n del Fondo Com칰n Municipal en el Ingreso Total",
                         "Participaci칩n de Ingresos por Transferencias en el Ingreso Total",
                         "Porcentaje de Ejecuci칩n Presupuestaria Devengada Municipal",
                         "Porcentaje de Puntajes PSU Igual o Superior a 450 Puntos en Establecimientos Municipales de Educaci칩n",
                         "Metros Cuadrados (M2) de Areas Verdes con Mantenimiento por Habitante",
                         "Porcentaje de mujeres funcionarias municipales",
                         "Densidad de Poblaci칩n por Km2",
                         "Poblaci칩n Comunal, Estimada por el INE",
                         "Porcentaje de Hogares de 0-40% de Ingresos respecto del Total Regional (RSH)"))

# dejar s칩lo la medici칩n m치s reciente de cada variable en cada comuna
sinim_3 <- sinim_2 |> 
  group_by(cut_comuna, variable) |> 
  slice_max(a침o) |> 
  ungroup()
  
# seleccionar columnas
sinim_4 <- sinim_3 |> 
  select(cut_comuna, variable, valor)
```

```{r}
# filtrar variables
siedu_2 <- siedu |> 
  filter(variable %in% c(
    "Consumo de energ칤a el칠ctrica per c치pita residencial",
    "Tiempo de viaje en hora punta ma침ana",
    "Superficie de 치reas verdes p칰blicas por habitante",
    "N칰mero de microbasurales por cada 10.000 habitantes",
    "Poblaci칩n estimada de migrantes internacionales por comuna",
    "Porcentaje de la poblaci칩n en situaci칩n de pobreza multidimensional",
    "Porcentaje de viviendas en situaci칩n de hacinamiento",
    "Tasa de v칤ctimas de delitos violentos por casos policiales cada 10.000 habitantes",
    "Tasa de conexiones residenciales fijas de internet por cada 100 habitantes"))

# dejar s칩lo la medici칩n m치s reciente de cada variable en cada comuna
siedu_3 <- siedu_2 |> 
  group_by(cut_comuna, variable) |> 
  slice_max(a침o) |> 
  ungroup()

# seleccionar columnas
siedu_4 <- siedu_3 |> 
  select(cut_comuna, variable, valor)
```

Veamos c칩mo van quedando los datos:
```{r}
sinim_4
```

```{r}
siedu_4
```

### Unir datos
Vamos a combinar estos dos conjuntos de datos para tener una mezcla de variables de temas socioecon칩micos que ser칤a interesante correlacionar. Como hicimos que ambos conjuntos de datos est칠n ordenados bajo la misma l칩gica, para unirlos s칩lo necesitamos agregar las filas de un conjunto al otro. 

```{r}
datos <- bind_rows(sinim_4, siedu_4)
```

Ahora que los datos est치n unidos, contamos con 20 variables para correlacionar.
```{r}
datos |> distinct(variable) |> print(n=Inf)
```

### Pivotar datos a ancho

El 칰ltimo paso antes del an치lisis de correlaci칩n es [pivotar la estructura de los datos al formato ancho.](https://r4ds.hadley.nz/data-tidy.html#widening-data), porque las funciones que realizan correlaciones en R esperan que los datos vengan de esta forma. 

Si bien en el formato largo tenemos una columna con el nombre de las variables y otra columna con el valor de cada variable, siendo cada fila una observaci칩n, en el **formato ancho** cada columna corresponde a una variable, mientras que cada fila corresponde a una observaci칩n.

```{r}
library(tidyr)

datos_ancho <- datos |> 
  # pivotar a ancho
  pivot_wider(id_cols = cut_comuna, # columna que identifica las observaciones
              values_from = valor, # columna con los valores
              names_from = variable # columna con los nombres de columna
              )
```

Se consultamos los nombres de las columnas, confirmamos que ahora cada variable se encuentra una columna individual:
```{r}
names(datos_ancho)
```


## Correlaci칩n

El paquete [`{corrr}`](https://corrr.tidymodels.org), parte del framework [tidymodels](https://www.tidymodels.org), nos facilita realizar una correlaci칩n cuyo resultado viene en una tabla ordenada con tan s칩lo una funci칩n: `correlate()`

```{r}
#| echo: false
options(width = 500)
```

```{r}
#| message: false
library(corrr)

correlaci칩n <- datos_ancho |> 
  select(-cut_comuna) |> 
  correlate() 

correlaci칩n
```
En la tabla anterior (muy rudimentaria a칰n) podemos ver el cruce entre todas las variables. La tabla se lee partiendo por una fila, que representa una de las variables, y cada vez que esta fila se intercepta con una columna, el valor representa el cruce de la variable de la fila con la variable de la columna.

Como estamos cruzando todas con todas las variables, obviamente cada variable tambi칠n se cruza consigo misma, lo cual resulta en un `NA`. 

Como el resultado es muy grande, y la cantidad de columnas muy alta, `{corrr}` ofrece la funci칩n `stretch()` para convertir f치cilmente el resultado a un formato largo:

```{r}
#| echo: false
options(width = 85)
```

```{r}
correlaci칩n |> stretch()
```
Esto nos puede servir para encontrar las correlaciones con una de las variables en particular; por ejemplo, encontrar la correlaci칩n de las variables con el tiempo de viaje en hora punta por las ma침anas:

```{r}
correlaci칩n |> 
  stretch() |> 
  filter(x == "Tiempo de viaje en hora punta ma침ana") |> 
  select(y, r) |> 
  head()
```

### Interpretaci칩n de correlaciones

La columna `r` nos indica el valor de la correlaci칩n de la variable filtrada con todo el resto de las variables.

Como las correlaciones pueden ser positivas o negativas, el valor de la correlaci칩n (`r`) puede ser positivo o negativo. Los valores de correlaci칩n van del 0 al 1 (o del 0 al -1), donde una correlaci칩n igual a 0 significa que no existe correlaci칩n, y una correlaci칩n igual a 1 significa que la correlaci칩n es total. Usualmente, una correlaci칩n mayor a 0,3 se considera moderada, y mayor a 0,5 se considera fuerte, pero las interpretaciones De estos valores son m칰ltiples.

Ordenemos las variables por su intensidad de correlaci칩n con el tiempo de viaje:

```{r}
correlaci칩n |> 
  stretch() |> 
  filter(x == "Tiempo de viaje en hora punta ma침ana") |> 
  select(y, r) |> 
  arrange(desc(abs(r))) |> 
  head()
```

En las primeras 3 filas podemos ver **correlaciones negativas fuertes**: las comunas del pa칤s donde los _tiempos de viaje de viaje en hora punta por la ma침ana_ son mayores, tambi칠n son comunas donde los _puntajes en la prueba de selecci칩n universitaria (PSU)_ son menores, y menores son los _recursos municipales por habitante_. Dicho de otro modo, a menores recursos municipales por habitantes, mayor tiempo de viaje en hora punta por la ma침ana.

En las filas 4 y 5 vemos unas **correlaciones positivas moderadas**: los tiempos de viaje en horario punta por las ma침anas tambi칠n son m치s altos en las comunas donde existen m치s _hogares con ingresos bajos_ (seg칰n el Registro Social de Hogares), y donde los _municipios dependen m치s del financiamiento del Fondo Com칰n Municipal_.


### B칰squeda de correlaciones
C칩mo tenemos todos los valores de correlaci칩n en una misma columna gracias a `stretch()`, podemos filtrar los valores para encontrar solamente con relaciones fuertes. Podemos lograr esto filtrando valores mayores a 0,5 o menores a -0,5, o filtrando valores mayores a el valor absoluto de 0,5 (`abs(0.5)`). Luego ordenamos los valores de mayor a menor, usando el valor absoluto de `r` (el valor en positivo).

```{r}
#| echo: false
options(width = 160)
```

```{r}
correlaci칩n |> 
  stretch(remove.dups = T) |> 
  filter(r > 0.5 | r < -0.5) |> 
  arrange(desc(abs(r))) |> 
  head()
```

Evidentemente, las correlaciones m치s fuertes son entre variables similares: los hogares de menores ingresos correlacionan con la poblaci칩n en situaci칩n de pobreza, la disponibilidad de presupuesto municipal por habitante se correlaciona con los ingresos municipales perc치pita, y otras obviedades. Habr칤a que afinar la selecci칩n de variables para remover aquellas que representan a un mismo fen칩meno social subyacente.

## Visualizaci칩n

Otra gracia de `{corrr}` es que facilita visualizar las correlaciones por medio de un gr치fico con la funci칩n `rplot()`, que produce un gr치fico `{ggplot2}` con nuestra matriz de correlaci칩n. 

En teor칤a, visualizar una correlaci칩n ser칤a as칤 de f치cil:

```r
datos |> 
  correlate() |> 
  rplot()
```

Como nuestra matriz de correlaci칩n tiene muchas variables, tendremos que agregar algunos ajustes para que se vea bien.

```{r}
#| fig.width: 12
#| fig.height: 9
library(ggplot2)

correlaci칩n |> 
  rearrange() |> # ordenar por intensidad
  rplot(print_cor = T, # agregar valores encima
        legend = F) + # sin leyenda
  # cortar los nombres de variable
  scale_y_discrete(labels = scales::label_wrap(70)) +
  scale_x_discrete(labels = scales::label_wrap(70)) +
  # variables inferiores inclinadas
  theme(axis.text.x = element_text(angle = 40, hjust = 1),
        axis.text = element_text(lineheight = 0.9, color = "black"))
```

Con esta visualizaci칩n, podemos ver el color y el tama침o de los c칤rculos para encontrar r치pidamente los cruces entre variables que est치n correlacionados.

A la r치pida, podemos ver que arriba a la izquierda la variable de consumo de energ칤a el칠ctrica se correlaciona con los recursos municipales, y abajo la izquierda podemos ver qu칠 el porcentaje de hogares en los tramos menores de ingresos se correlaciona con menos conexiones a Internet y menos consumo el칠ctrico. Tambi칠n al centro del gr치fico podemos ver una alta correlaci칩n entre la _tasa de v칤ctimas de delitos violentos_ y la _densidad poblacional_.


### Alternativa
Otra funci칩n de R que permite realizar correlaciones y visualizarlas de inmediato es `ggcor()` del paquete [`{GGally}`](https://ggobi.github.io/ggally/index.html), que entrega varios tipos de gr치ficos estad칤sticos para an치lisis exploratorios de datos.

```{r}
#| fig.width: 14
#| fig.height: 10
#| message: false

datos_ancho |> 
  select(-cut_comuna) |> 
  GGally::ggcorr(hjust = 1, nbreaks = 5, layout.exp = 10,
                 label = TRUE)
```

El resultado es menos atractivo, pero si es bastante m치s legible.

### Manualmente

Finalmente, y como no pod칤a faltar, tambi칠n podemos crear un gr치fico de la matriz de correlaci칩n desde cero con `{ggplot2}`. Esto no es tan complejo gracias a que `correlate()` y `stretch()` entregan los resultados bien ordenaditos.

```{r}
#| fig.width: 14
#| fig.height: 10
#| message: false
#| warning: false

datos_ancho |> 
  correlate() |> 
  rearrange() |> 
  stretch() |> 
  # gr치fico
  ggplot() +
  aes(x, y, fill = r) +
  geom_tile(color = "white", linewidth = 0.6) + # geometr칤a de cuadros o mosaicos
  geom_text(aes(label = round(r, 1)), color = "black", size = 3) + # texto
  # escala de color de los cuadros
  scale_fill_gradient2(high = "indianred2", mid = "white", low = "skyblue1", na.value = "white") +
  # formato de las escalas de los ejes
  scale_y_discrete(labels = scales::label_wrap(50), expand = c(0, 0)) +
  scale_x_discrete(labels = scales::label_wrap(60), expand = c(0, 0)) +
  # ajustes de tema
  theme_minimal() +
  theme(axis.text = element_text(lineheight = 0.9, color = "black"),
        axis.text.x = element_text(angle = 40, hjust = 1),
        axis.title = element_blank(),
        legend.key.width = unit(2, "mm"))

```

Tambi칠n podemos aprovechar el vuelo para hacer una bonita obra de arte con nuestras correlaciones:

```{r}
#| fig.width: 4
#| fig.height: 4
#| message: false

datos_ancho |> 
  correlate() |> 
  rearrange() |> 
  stretch() |> 
  ggplot() +
  aes(x, y, fill = r) +
  geom_tile(color = "white", linewidth = 0.6) +
  scale_fill_gradient2(high = "#865BAB", mid = "white", low = "#AB5B90", na.value = "white") +
  guides(fill = guide_none()) +
  theme_void() +
  coord_fixed()
```

Como siempre, `{ggplot2}` es una herramienta extremadamente vers치til para visualizar cualquier tipo de informaci칩n. Puedes [aprender a crear visualizaciones de datos desde cero en R siguiendo este tutorial de `{ggplot2}`.](https://bastianolea.rbind.io/blog/r_introduccion/tutorial_visualizacion_ggplot/)

----

Si te gust칩 este contenido, puedes ayudarme don치ndome un cafecito si presionas el siguiente bot칩n. Te lo agradecer칤a mucho y me anima a seguir compartiendo!

{{< cafecito >}}

{{< cursos >}}