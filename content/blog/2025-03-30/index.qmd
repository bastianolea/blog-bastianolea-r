---
title: Redactar una lista de palabras separadas por comas en R 
author: Basti√°n Olea Herrera 
date: '2025-03-30' 
slug: [] 
categories: [] 
tags:
  - texto
excerpt: "Aprende a generar un texto que redacte un vector de palabras sueltas en una oraci√≥n separada por comas y con el separador _y_ al final; por ejemplo: ‚Äôuno, dos y tres‚Äô. √ötil para escribir program√°ticamente t√≠tulos, subt√≠tulos y textos para reportes."
---

Cuando obtenemos una lista de palabras que obtuvimos desde nuestros datos, y
queremos incluirlas en alg√∫n reporte ‚Äîya sea como el t√≠tulo de un gr√°fico, el
subt√≠tulo de un cap√≠tulo, o un texto din√°mico basado en los datos‚Äî vamos a
querer que est√©n redactadas correctamente: separadas por comas. La funci√≥n
`paste()` sirve para unir distintos objetos de tipo texto.

```{r}
paste("primera", "segunda")
```

Si queremos unir las dos palabras, podemos especificar un separador:

```{r}
paste("primera", "segunda", sep = ", ") # unir palabras, separadas por comas
```
Pero si las palabras las estamos extrayendo desde los datos, lo m√°s probable es
que vengan dentro de un vector de texto, como el siguiente:

```{r}
palabras <- c("verde", "azul", "morado", "fuscia")
```

Entonces, la uni√≥n entre los elementos de un vector se realiza con el argumento
`collapse` de `paste()`:

```{r}
paste(palabras, collapse = ", ")
```

Con esto obtenemos un vector de texto de largo 1, que contiene los elementos del
vector anterior, pero unidos, separados por una coma. Pero podemos mejorar este
resultado si escribimos un poco m√°s de c√≥digo para que la redacci√≥n de los
elementos sea m√°s apropiada: separando el √∫ltimo elemento por la palabra _y_.
Primero obtendremos el largo del vector de palabras `length()`. Luego usaremos
este largo para seleccionar las palabras desde la primera a la pen√∫ltima.
```{r}
largo <- length(palabras)
palabras_a <- palabras[1:largo-1]
print(palabras_a) # todas las palabras menos la √∫ltima
```
Volvemos a usar el largo para extraer solamente la √∫ltima palabra:
```{r}
palabras_b <- palabras[largo]
print(palabras_b) # la √∫ltima palabra
```
Unimos el vector de las primeras palabras, separ√°ndolas con comas:
```{r}
# unir las primeras palabras separadas por comas
palabras_a2 <- paste(palabras_a, collapse = ", ")
```
Ahora que tenemos dos objetos, uno con las primeras palabras separadas por
comas, y otro con la √∫ltima palabra, unimos ambos objetos, separ√°ndolos con la
palabra _y_:
```{r}
# agregar la √∫ltima palabra separada por "y"
palabras_redactadas <- paste(palabras_a2, palabras_b, sep = " y ")
print(palabras_redactadas)
```

C√≥mo resultado, obtenemos un c√≥digo que genera la redacci√≥n de cualquier cantidad de palabras que vengan en un vector de texto. Podemos formalizar este invento creando una funci√≥n que simplifique esta tarea:

```{r}
redactar_palabras <- function(palabras) {
  largo <- length(palabras)
  palabras_a <- palabras[1:largo-1] # primeras palabras
  palabras_b <- palabras[largo] #√∫ltima palabra
  
  # unir las primeras palabras separadas por comas
  palabras_a2 <- paste(palabras_a, collapse = ", ")
  
  # agregar la √∫ltima palabra separada por "y"
  palabras_redactadas <- paste(palabras_a2, palabras_b, sep = " y ")
  
  # retornar palabras redactadas
  return(palabras_redactadas)
}
```

Gracias a esta funci√≥n, ahora podemos lograr la redacci√≥n de las palabras de forma mucho m√°s f√°cil y clara:
```{r}
redactar_palabras(palabras)
```

---

Dicho lo anterior, y gracias a lo extenso que es el ecosistema de R, quiz√°s resulta m√°s r√°pido usar una funci√≥n que hace exactamente lo mismo y que viene en `{glue}`, un paquete del _Tidyverse_:

```{r}
library(glue)
glue::glue_collapse(palabras, 
                    sep = ", ", 
                    last = " y ")
```

A veces nos podemos reinventar la rueda cuando ya existen soluciones üò£ Pero esto no es tiempo perdido si es que nos permite aprender cosas nuevas y/o poner en pr√°ctica nuestras habilidades ü•∞