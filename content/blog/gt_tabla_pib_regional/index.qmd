---
title: Tablas personalizables con {gt}
author: Bastián Olea Herrera
date: '2024-11-17'
slug: []
draft: true
format: "hugo-md"
categories:
  - tutoriales
tags:
  - tablas
  - web scraping
editor_options: 
  chunk_output_type: console
---

```{r}
library(dplyr)
library(tidyr)
library(gt)
library(forcats)
library(glue)
library(lubridate)

color_texto = "#444444"
color_fondo = "grey96"
color_detalle = "grey90"
color_detalle2 = "grey70"
color_detalle3 = "grey50"

color <- list("centro" = "#B16AD2", 
              "izquierda" = "#DB231D",
              "derecha" = "#1D76DB",
              "independiente" = "#38B51D", 
              "otros" = color_detalle2)

comuna_elegida <- "PUENTE ALTO"

datos_tabla <- tibble::tribble(
  ~candidato, ~partido,     ~sector, ~votos, ~porcentaje,
  "Matías Jair Toledo Herrera",    "IND", "Izquierda", 172015,       0.461,
  "Karla Rubilar Barahona",    "IND",   "Derecha", 124484,       0.333,
  "Luis Escanilla Benavides",     "PS", "Izquierda",  20744,       0.056,
  "Elein Ossandón Manrique",    "PSC",   "Derecha",  16598,       0.044,
  "Nulo/Blanco",       NA,     "Otros",  39659,       0.106
) |> 
  mutate(sector = as.factor(sector))


datos_tabla |> 
  arrange(desc(candidato)) |>
  select(candidato, partido, votos, porcentaje, sector) |> 
  gt() |> 
  # titulares
  tab_header(title = md("_Resultados parciales:_ Elecciones Municipales 2024"),
             subtitle = md(glue("**{str_to_title(comuna_elegida)}**"))) |> 
  # formato de números
  fmt_percent(porcentaje, decimals = 1) |> 
  fmt_number(votos, 
             decimals = 0, sep_mark = ".", dec_mark = ",") |> 
  # estilo fondos de todas las celdas excepto partido
  tab_style(locations = cells_body(column = c(candidato, votos, porcentaje)),
            style = cell_fill(color = color_fondo)) |>
  # color texto partidos
  data_color(columns = sector,
             target_columns = partido,
             method = "factor",
             palette = c(color$derecha, color$izquierda, color_detalle3),
             apply_to = "text") |>
  # color fondo partidos
  data_color(columns = sector,  rows = candidato != "Nulo/Blanco",
             target_columns = partido,
             method = "factor",
             palette = c(color$derecha, color$izquierda, color_detalle3), # la paleta va en el orden que tiene el vector
             alpha = 0.2, apply_to = "fill", autocolor_text = FALSE) |>
  # color fondo nulos
  data_color(columns = sector, rows = candidato == "Nulo/Blanco",
             target_columns = partido,
             palette = color_fondo,
             alpha = 1, apply_to = "fill", autocolor_text = FALSE) |>
  # tipografía
  opt_table_font(font = google_font("Open Sans")) |>
  # alineación de textos
  cols_align(columns = c(candidato, partido, porcentaje), align = "left") |> 
  cols_align(columns = c(partido), align = "center") |> 
  cols_hide(sector) |>
  opt_table_lines("none") |>
  opt_align_table_header(align = "left") |> 
  # estilo de textos
  tab_style(locations = cells_body(column = c(candidato, partido, porcentaje)), 
            style = cell_text(weight = "bold")) |> 
  tab_style(locations = cells_column_labels(), 
            style = cell_text(style = "italic")) |> 
  tab_style(locations = cells_body(rows = candidato == "Nulo/Blanco"), 
            style = cell_text(weight = "normal")) |>
  # estilo fila nulos
  tab_style(locations = cells_body(rows = candidato == "Nulo/Blanco"), 
            style = cell_text(color = color_detalle2)) |> 
  # etiquetas de columnas
  cols_label(candidato = "Candidato/a",
             partido = "Partido",
             votos = "Votos",
             porcentaje = "%") |> 
  # notas al pie
  tab_options(table_body.hlines.style = "solid", 
              table_body.hlines.width = 8, 
              table_body.hlines.color = "white",
              table_body.vlines.style = "solid", 
              table_body.vlines.width = 8, 
              table_body.vlines.color = "white") |> 
  tab_footnote(footnote = glue("Fuente: Servel")) |>
  tab_style(locations = cells_footnotes(), 
            style = cell_text(align = "right", size = px(12))) |> 
  tab_options(heading.subtitle.font.size = 19, heading.padding = 1, 
              heading.border.bottom.style = "solid", 
              heading.border.bottom.width = 16, 
              heading.border.bottom.color = "white") |> 
  tab_options(table_body.border.bottom.style = "solid", 
              table_body.border.bottom.width = 5, 
              table_body.border.bottom.color = "white",
              footnotes.padding = 1)

tabla

```


----



```{r}
library(dplyr)
library(rvest)

url <- "https://si3.bcentral.cl/Siete/ES/Siete/Cuadro/CAP_ESTADIST_REGIONAL/MN_REGIONAL1/CCNN2018_PIB_REGIONAL_T?cbFechaInicio=2018&cbFechaTermino=2024&cbFrecuencia=ANNUAL&cbCalculo=NONE&cbFechaBase="

sitio <- session(url) |> read_html()

tablas <- sitio |> html_table(convert = FALSE)

tabla <- tablas[[1]] |> 
  rename(region = 2) |> 
  select(-1)
```

```{r}
library(stringr)
library(forcats)

pib_regional <- tabla |> 
  mutate(across(starts_with("20"), ~str_remove(.x, "\\."))) |> 
  mutate(across(starts_with("20"), as.numeric)) |> 
  filter(str_detect(region, "Región")) |> 
  mutate(n_region = row_number()) |> 
  relocate(n_region, .before = 1) |> 
  mutate(region = fct_reorder(region, n_region))
```


```{r}
library(gt)

pib_regional |> 
  gt() |> 
  cols_align("right", region)
```

```{r}
pib_regional |> 
  gt() |> 
  cols_align("right", region) |> 
  fmt_number(columns = where(is.numeric), 
             sep_mark = ".", decimals = 0)

```

```{r}
library(tidyr)

pib_regional_long <- pib_regional |> 
  select(-n_region) |> 
  pivot_longer(cols = where(is.numeric),
               names_to = "año",
               values_to = "valor")

pib_regional_cambio <- pib_regional_long |> 
  arrange(region, año) |> 
  group_by(region) |> 
  mutate(cambio = valor/lag(valor),
         cambio = 1 - cambio) |> 
  ungroup() |> 
  filter(!is.na(cambio))

pib_regional_cambio
```

```{r}
pib_regional_cambio_wide <- pib_regional_cambio |> 
  select(region, año, cambio) |> 
  pivot_wider(names_from = año, values_from = cambio)
```

```{r}
pib_regional_cambio_wide |> 
  gt()
```

```{r}
pib_regional_cambio_wide |> 
  gt() |> 
  cols_align("right", region) |> 
  fmt_percent(where(is.numeric),
              decimals = 1, dec_mark = ",")
```

```{r}
pib_regional_cambio_wide |> 
  gt() |> 
  cols_align("right", region) |> 
  fmt_percent(where(is.numeric),
              decimals = 1, dec_mark = ",") |> 
  data_color(where(is.numeric), 
             method = "numeric",
             palette = "viridis")
```

```{r}
tabla_pib_regional <- pib_regional_cambio_wide |> 
  gt() |> 
  cols_align("right", region) |> 
  fmt_percent(where(is.numeric),
              decimals = 1, dec_mark = ",") |> 
  data_color(where(is.numeric), 
             method = "bin",
             apply_to = "text",
             palette = c("#bf2f2f", "black", "#279f2b"),
             bins = c(-Inf, -0.02, 0.02, Inf)) |> 
  cols_label(region = "Región")

tabla_pib_regional
```

```{r}
tabla_pib_regional |> 
  cols_width(region ~ px(220)) |> 
  tab_options(data_row.padding = px(8)) |> 
  opt_table_outline(width = px(1)) |> 
  opt_row_striping()
```

```{r}
tabla_pib_regional |> 
  cols_width(region ~ px(220)) |> 
  tab_style(style = cell_text(weight = "bold"),
            locations = cells_column_labels()) |> 
  tab_style(style = cell_text(style = "italic"),
            locations = cells_body(columns = region)) |> 
  tab_options(
    table.border.top.style = "hidden",
    table.border.bottom.style = "hidden"
  )
```


```{r}
tabla_pib_regional |> 
  tab_header(
    title = "Producto Interno Bruto regional",
    subtitle = "Variación anual, por regiones"
  ) |> 
  tab_source_note("Fuente: Banco Central de Chile")
```

```{r}
# una columna
tabla_pib_regional |> 
  tab_style(style = cell_text(weight = "bold"),
            locations = cells_body(columns = `2023`,
                                   rows = `2023` < -0.03))

# dos columnas
tabla_pib_regional |> 
  tab_style(style = cell_text(weight = "bold"),
            locations = list(cells_body(columns = `2022`,
                                        rows = `2022` > 0),
                             cells_body(columns = `2023`,
                                        rows = `2023` > 0))
  )

# múltiples columnas con filas condicionales
columnas <- pib_regional_cambio_wide |> 
  select(where(is.numeric)) |> 
  names()
tabla_pib_regional |> 
  tab_style(style = cell_text(weight = "bold"),
            locations = purrr::map(columnas, 
                                   ~cells_body(columns = .x,
                                               rows = !!sym(.x) < -0.1))
  )
```


https://themockup.blog/static/resources/gt-cookbook.html#table-customization
