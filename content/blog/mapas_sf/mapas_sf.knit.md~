---
title: Mapas y visualización de datos geoespaciales en R con {sf}
author: Bastián Olea Herrera
date: '2025-10-22'
draft: false
freeze: false
slug: []
categories:
  - tutoriales
tags:
  - mapas
  - visualización de datos
format:
  hugo-md:
    output-file: index
    output-ext: md
links:
  - icon: registered
    icon_pack: fas
    name: SF
    url: https://r-spatial.github.io/sf/
execute:
  eval: false
  cache: false
excerpt: "R cuenta con un muy amplio ecosistema de paquetes para datos geoespaciales. Uno de los paquetes más importantes es `{sf}`, que permite manipular datos espaciales a partir del estándar _simple features_ (características simples), ampliamente utilizado en sistemas de información geográfica (SIG/GIS). En esta guía iré guardando los comandos que uso frecuentemente para manipular y visualizar datos geoespaciales en R. En la medida que voy aprendiendo más sobre hacer mapitas, iré actualizando y complementando."
---

{{< imagen "mapa_rm_featured.png" >}}


{{< aviso "⚠️ Este tutorial se encuentra en construcción! ⚠️" >}}




R cuenta con un muy amplio [ecosistema](https://github.com/r-spatial/) de paquetes para datos geoespaciales. Uno de los [paquetes más importantes es `{sf}`](https://r-spatial.github.io/sf/), que permite manipular datos espaciales a partir del estándar _simple features_ (características simples), ampliamente utilizado en sistemas de información geográfica (SIG/GIS).

En esta guía iré guardando los comandos que uso frecuentemente para **manipular, transformar y visualizar datos geoespaciales** en R. En la medida que voy aprendiendo más sobre hacer mapitas, iré actualizando y complementando.

Lo inicial es instalar `{sf}`:




``` r
install.packages("sf")
```



Y cargarlo junto a `{dplyr}` para empezar a trabajar con datos geoespaciales.



``` r
library(sf)
library(dplyr)
```







**Nota:** para simplificar, en este tutorial voy a ocultar el código de los gráficos, pero siempre estará disponible bajo flechitas que despliegan el código, como la siguiente:



{{< detalles "**Ver código para los gráficos**" >}}




```r
library(ggplot2)

# tema de colores
thematic::thematic_on(fg = "#553A74",
bg = "#EAD2FA",
accent = "#9069C0")

theme_set(
# fondo transparente para mapas
theme(plot.background = element_rect(fill = "transparent", color = "transparent")) +
# borrar líneas feas
theme(axis.ticks = element_blank())
)
```


{{< /detalles >}}




<br>



{{< indice >}}




----


## Carga de mapas

Una de las fuentes principales de datos geoespaciales son los _shapefiles_. Pero también existen **paquetes de R que contienen información geoespacial**, para mayor conveniencia. Exploraremos ambas opciones a continuación.


### Cargar mapas de cualquier país

Si no tenemos o no queremos descargar _shapes_, podemos **cargar mapas de cualquier país directo en R** gracias a [`{rnaturalearth}`](http://ropensci.github.io/rnaturalearth/). Con este paquete obtenemos directamente mapas de cualquier país del mundo, incluyendo sus estados o regiones internos, sin necesidad de descargas.

Instala `{rnaturalearth}` si no lo tienes:

```r
install.packages("rnaturalearth")
```

Puedes insertar el nombre de tu país para seguir con este tutorial usando ejemplos de tu territorio.




``` r
# install.packages("rnaturalearth")
library(rnaturalearth)

pais <- ne_states("Argentina")
# pais <- ne_states("Mexico")
# pais <- ne_states("Colombia")

mapa <- pais |> 
  # seleccionar columnas
  select(pais = admin,
         region = name_es,
         geometry)

mapa
```

```
## Simple feature collection with 24 features and 2 fields
## Geometry type: MULTIPOLYGON
## Dimension:     XY
## Bounding box:  xmin: -73.57274 ymin: -55.05202 xmax: -53.66155 ymax: -21.78694
## Geodetic CRS:  WGS 84
## First 10 features:
##           pais     region                       geometry
## 1    Argentina Entre Ríos MULTIPOLYGON (((-58.20011 -...
## 12   Argentina      Salta MULTIPOLYGON (((-68.49647 -...
## 13   Argentina      Jujuy MULTIPOLYGON (((-67.25133 -...
## 741  Argentina    Formosa MULTIPOLYGON (((-62.34136 -...
## 746  Argentina   Misiones MULTIPOLYGON (((-54.66497 -...
## 749  Argentina      Chaco MULTIPOLYGON (((-58.35127 -...
## 750  Argentina Corrientes MULTIPOLYGON (((-58.6042 -2...
## 1318 Argentina  Catamarca MULTIPOLYGON (((-68.33776 -...
## 1320 Argentina   La Rioja MULTIPOLYGON (((-69.65405 -...
## 1321 Argentina   San Juan MULTIPOLYGON (((-69.95766 -...
```




### Cargar _shapes_

Un _shapefile_ es un formato de archivo común para datos geoespaciales, que en realidad consiste en una **carpeta** con archivos relacionados (`.shp`, `.shx`, `.dbf`, entre otros) que juntos representan la geometría y atributos de los objetos geográficos.

Teniendo la carpeta, basta con cargarla con la función `read_sf()`.



{{< detalles "**Ejemplo de descarga y carga de un _shapefile_ de Chile**" >}}




Para aprender, podemos descargar un _shape_ y usarlo para practicar. Si no tienes uno a mano, en el siguiente botón podemos bajar un _shapefile_ de Chile por regiones, que proviene de la [Mapoteca de la Biblioteca del Congreso Nacional](https://www.bcn.cl/siit/mapas_vectoriales).

{{< boton "Division regional: polígonos de las regiones de Chile" "https://www.bcn.cl/obtienearchivo?id=repositorio/10221/10398/2/Regiones.zip" "fas fa-map">}}

También puedes descargarlo directamente desde R con `download.file()` y luego `unzip()`, [como se indica en este post](/blog/mapa_chile_triple/#descargar-mapas).


Una vez descargado, descomprimimos el archivo y obtenemos una **carpeta**. Esta carpeta es nuestro _shapefile_, así que la guardamos dentro de nuestro [proyecto de RStudio](/blog/r_introduccion/proyectos/), idealmente dentro de una carpeta donde guardemos nuestros mapas. 

```r
# descargar
download.file("https://www.bcn.cl/obtienearchivo?id=repositorio/10221/10398/2/Regiones.zip",
"Regiones.zip")

# descomprimir
unzip("Regiones.zip", exdir = "shapes/Regiones")
```

En el siguiente ejemplo, guardamos el _shapefile_ en una carpeta `shapes`, y lo cargamos con `read_sf()`.








``` r
mapa <- read_sf("shapes/Regiones") |> 
  janitor::clean_names()

mapa
```


```
## Simple feature collection with 17 features and 7 fields
## Geometry type: GEOMETRY
## Dimension:     XY
## Bounding box:  xmin: -12183900 ymin: -7554306 xmax: -7393644 ymax: -1978920
## Projected CRS: WGS 84 / Pseudo-Mercator
## # A tibble: 17 × 8
##    objectid cir_sena codregion area_km    st_area_sh st_length region           
##  *    <dbl>    <int>     <int>   <dbl>         <dbl>     <dbl> <chr>            
##  1     1084        1        15  16867.  18868687744.   750530. Región de Arica …
##  2     1085        2         1  42285.  48306372203.  1213713. Región de Tarapa…
##  3     1086        3         2 126071. 150845155633   2516112. Región de Antofa…
##  4     1087       15        12 133053. 358131609833  90498304. Región de Magall…
##  5     1088       14        11 106703. 224274263072  41444811. Región de Aysén …
##  6     1089        4         3  75661.  96439063562.  2401741. Región de Atacama
##  7     1090        5         4  40576.  54980818749.  2065933. Región de Coquim…
##  8     1091        6         5  16323.  23014748571.  1679609. Región de Valpar…
##  9     1092        7        13  15392.  22252038246.  1064253. Región Metropoli…
## 10     1093       13        10  48408.  87718341940.  7874158. Región de Los La…
## 11     1094       12        14  18245.  31086613540.  1844423. Región de Los Rí…
## 12     1095       11         9  31838.  52215073344.  1501025. Región de La Ara…
## 13     1096       10         8  24022.  38176117509.  2097147. Región del Bío-B…
## 14     1097       10        16  13104.  20376298459.  1074094. Región de Ñuble  
## 15     1098        9         7  30322.  45969426092.  1388328. Región del Maule 
## 16     1099        8         6  16349.  24090278437.   984853. Región del Liber…
## 17     1100        0         0   3937.   9306245194.   388722. Zona sin demarcar
## # ℹ 1 more variable: geometry <GEOMETRY [m]>
```

{{< /detalles >}}


{{< aviso "Puedes seguir este tutorial independientemente del mapa que hayas cargado (el _shape_ de Chile, con `rnaturalearth`, u otro _shape_ que tú elijas); lo importante es que cargues un objeto `mapa` que tenga columna `geometry` y `region`." >}}




<!--
### Cargar geoJSON


### Cargar KMZ



``` r
unzip("~/Downloads/Mis lugares.kmz", exdir = "~/Downloads/Mis lugares")

sf::read_sf("~/Downloads/Mis lugares/doc.kml")
```

```
## Simple feature collection with 5 features and 2 fields
## Geometry type: POINT
## Dimension:     XYZ
## Bounding box:  xmin: -70.65963 ymin: -33.46337 xmax: -70.54287 ymax: -33.41469
## z_range:       zmin: 0 zmax: 0
## Geodetic CRS:  WGS 84
## # A tibble: 5 × 3
##   Name                         Description                  geometry
##   <chr>                        <chr>                     <POINT [°]>
## 1 Marca de posición sin título ""          Z (-70.65963 -33.46337 0)
## 2 Marca de posición sin título ""          Z (-70.61304 -33.43355 0)
## 3 Marca de posición sin título ""            Z (-70.599 -33.46007 0)
## 4 Marca de posición sin título ""          Z (-70.55756 -33.41469 0)
## 5 Marca de posición sin título ""          Z (-70.54287 -33.44922 0)
```



-->

----

Como vemos, una vez que cargamos los datos geoespaciales obtenemos una **tabla con características especiales**. Arriba de la tabla vemos una descripción de las características del mapa, el tipo de geometrías, la caja o _bounding box_ que enmarca los polígonos, y el sistema de referencia de coordenadas del mapa.

En `{sf}` los datos geoespaciales además contienen una columna `geometry`, que contiene las geometrías (puntos, líneas o polígonos) que definen la forma y ubicación de los elementos geográficos. Vamos a trabajar con esta columna si queremos **modificar la geometría** de los elementos geoespaciales o calcular algo a partir de ellos. **Cada fila de la tabla representa un objeto geográfico** (una región, comuna, país, etc.) y las demás columnas son variables relacionadas al objeto geográfico (población, superficie, nombre, etc.)


<!--
## Glosario

- **Simple features**: estándar para representar datos geoespaciales en forma de tablas con una columna especial de geometría.
- **Shapefile**: formato de archivo común para datos geoespaciales, que en realidad consiste en varios archivos relacionados.
- **Polígono**: forma geométrica que representa áreas en un mapa.

-->

----


## Visualización básica de mapas

Para visualizar un mapa con `{sf}` usamos la geometría `geom_sf()` dentro de un gráfico de `{ggplot2}`. Esta función reconoce automáticamente la columna `geometry` del objeto espacial, y dibuja las formas geográficas correspondientes.




``` r
mapa |> 
  ggplot() +
  geom_sf(fill = "#9069C0", 
          color = "#EBD2FA",
          linewidth = 0.1)
```

<img src="mapas_sf_files/figure-html/mapa_basico-1.png" width="672" />

{{< aviso "Si necesitas aprender lo básico de `{ggplot2}` para visualización de datos, [revisa este completo tutorial](/blog/r_introduccion/tutorial_visualizacion_ggplot/)." >}}





----

## Operaciones sobre geometrías

Las operaciones sobre geometrías permiten manipular y analizar las formas y ubicaciones de los objetos geográficos. A continuación veremos algunas operaciones comunes que se pueden realizar con el paquete `{sf}` en R.

### Calcular centroide

El centroide es el punto central de un polígono. Calcularlo sirve, por ejemplo, para ubicar una etiqueta de texto sobre un polígono, poner un punto sobre un territorio que crece con respecto a una variable, etc.




``` r
mapa_centroide <- mapa |> 
  select(region, geometry) |> 
  mutate(centroide = st_centroid(geometry))

mapa_centroide
```

```
## Simple feature collection with 24 features and 1 field
## Active geometry column: geometry
## Geometry type: MULTIPOLYGON
## Dimension:     XY
## Bounding box:  xmin: -73.57274 ymin: -55.05202 xmax: -53.66155 ymax: -21.78694
## Geodetic CRS:  WGS 84
## First 10 features:
##          region                       geometry                   centroide
## 1    Entre Ríos MULTIPOLYGON (((-58.20011 -... POINT (-59.20493 -32.03189)
## 12        Salta MULTIPOLYGON (((-68.49647 -... POINT (-64.80661 -24.28824)
## 13        Jujuy MULTIPOLYGON (((-67.25133 -... POINT (-65.77985 -23.31783)
## 741     Formosa MULTIPOLYGON (((-62.34136 -... POINT (-59.94839 -24.89604)
## 746    Misiones MULTIPOLYGON (((-54.66497 -... POINT (-54.65212 -26.86956)
## 749       Chaco MULTIPOLYGON (((-58.35127 -... POINT (-60.77109 -26.39039)
## 750  Corrientes MULTIPOLYGON (((-58.6042 -2... POINT (-57.79471 -28.76018)
## 1318  Catamarca MULTIPOLYGON (((-68.33776 -...  POINT (-66.99006 -27.3092)
## 1320   La Rioja MULTIPOLYGON (((-69.65405 -... POINT (-67.21371 -29.66235)
## 1321   San Juan MULTIPOLYGON (((-69.95766 -... POINT (-68.88199 -30.82274)
```


```
## Warning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not
## give correct results for longitude/latitude data
```

<img src="mapas_sf_files/figure-html/mapa_centroide-1.png" width="672" />

{{< detalles "Ver código del gráfico" >}}



```r
mapa_centroide |> 
filter(region == mapa$region[3]) |> 
ggplot() +
geom_sf(fill = "#9069C0", 
linewidth = NA) +
geom_sf(
aes(geometry = centroide),
size = 3, alpha = .6) +
geom_sf_text(
aes(geometry = centroide),
label = "centroide", size = 3,
nudge_y = -20000)
```


{{< /detalles >}}





----

### Extraer longitud y latitud
Para obtener las coordenadas (longitud y latitud) de un elemento espacial, necesitamos primero que sea un punto, porque un polígono es una figura compleja que no tiene solamente una latitud y una longitud. Si tenemos un polígono, [primero calculamos el centroide](#calcular-centroide), y luego extraemos las coordenadas con `st_coordinates()`. Como esta función retorna la longitud y latitud de cada punto al mismo tiempo, tenemos que pedirle que entregue la una o la otra usando corchetes.




``` r
mapa_centroide_coordenadas <- mapa_centroide |> 
  mutate(lon = st_coordinates(centroide)[,1],
         lat = st_coordinates(centroide)[,2])

mapa_centroide_coordenadas |> 
  select(region, lon, lat)
```

```
## Simple feature collection with 24 features and 3 fields
## Geometry type: MULTIPOLYGON
## Dimension:     XY
## Bounding box:  xmin: -73.57274 ymin: -55.05202 xmax: -53.66155 ymax: -21.78694
## Geodetic CRS:  WGS 84
## First 10 features:
##          region       lon       lat                       geometry
## 1    Entre Ríos -59.20493 -32.03189 MULTIPOLYGON (((-58.20011 -...
## 12        Salta -64.80661 -24.28824 MULTIPOLYGON (((-68.49647 -...
## 13        Jujuy -65.77985 -23.31783 MULTIPOLYGON (((-67.25133 -...
## 741     Formosa -59.94839 -24.89604 MULTIPOLYGON (((-62.34136 -...
## 746    Misiones -54.65212 -26.86956 MULTIPOLYGON (((-54.66497 -...
## 749       Chaco -60.77109 -26.39039 MULTIPOLYGON (((-58.35127 -...
## 750  Corrientes -57.79471 -28.76018 MULTIPOLYGON (((-58.6042 -2...
## 1318  Catamarca -66.99006 -27.30920 MULTIPOLYGON (((-68.33776 -...
## 1320   La Rioja -67.21371 -29.66235 MULTIPOLYGON (((-69.65405 -...
## 1321   San Juan -68.88199 -30.82274 MULTIPOLYGON (((-69.95766 -...
```

<img src="mapas_sf_files/figure-html/barras_latitud-1.png" width="672" />

{{< detalles "Ver código del gráfico" >}}



```r
mapa_centroide_coordenadas |> 
distinct(region, .keep_all = TRUE) |> 
mutate(region = forcats::fct_reorder(region, lat)) |> # ordenar regiones
ggplot() +
aes(lat, region) +
geom_col(width = 0.7, fill = "#9069C0") +
geom_text(
aes(label = region),
size = 3, hjust = -0.05, color = "#EAD2FA") +
scale_y_discrete(labels = NULL) +
labs(y = NULL, x = "Latitud")
```


{{< /detalles >}}





----


### Calcular buffer
Un _buffer_ es una zona alrededor de un objeto geográfico, definida por una distancia específica. Calcular un _buffer_ es útil para analizar áreas de influencia, proximidad a ciertos puntos o regiones, o para hacer modificiones sobre mapas con fines de visualización.

Con la función `st_buffer()` definimos el espacio en torno a un polígono, especificando en el argumento `dist` la **distancia** del _buffer_ en las unidades del sistema de coordenadas del mapa (por ejemplo, metros si el mapa está en UTM), y con `max_cells` podemos controlar la calidad del polígono resultante.




``` r
mapa_buffer <- mapa |> 
  # filtrar una región/polígono
  filter(region == mapa$region[3]) |> 
  # crear buffer
  mutate(buffer = st_buffer(geometry, 
                            dist = 20000,
                            max_cells = 10000))
```

<img src="mapas_sf_files/figure-html/mapa_buffer-1.png" width="672" />

{{< detalles "Ver código del gráfico" >}}



```r
mapa_buffer |> 
ggplot() +
# capa de la región
geom_sf(aes(geometry = geometry), 
fill = "#9069C0", linewidth = NA) +
# capa del buffer
geom_sf(aes(geometry = buffer), 
fill = "#9069C0", alpha = 0.5, linewidth = NA)
```


{{< /detalles >}}




----

### Calcular caja de un polígono
Bounding box



``` r
st_bbox(mapa)
```

```
##      xmin      ymin      xmax      ymax 
## -73.57274 -55.05202 -53.66155 -21.78694
```




----

### Convertir caja a polígono



``` r
caja <- st_bbox(mapa)

caja_poli <- caja |> 
  st_as_sfc() |>
  st_as_sf()

caja_poli
```

```
## Simple feature collection with 1 feature and 0 fields
## Geometry type: POLYGON
## Dimension:     XY
## Bounding box:  xmin: -73.57274 ymin: -55.05202 xmax: -53.66155 ymax: -21.78694
## Geodetic CRS:  WGS 84
##                                x
## 1 POLYGON ((-73.57274 -55.052...
```

<img src="mapas_sf_files/figure-html/unnamed-chunk-11-1.png" width="672" />

{{< detalles "Ver código del gráfico" >}}



```r
ggplot() +
  # mapa de fondo
  geom_sf(data = mapa,
          fill = "#9069C0", color = "#EBD2FB",
          linewidth = 0.3) +
  # capa con la caja encima
  geom_sf(data = caja_poli,
          fill = "#9069C0", color = "#9069C0", 
          linewidth = 0.8,
          alpha = 0.4) +
  # tema
  theme(axis.text = element_blank(),
        panel.background = element_blank())
```


{{< /detalles >}}







----


### Crear un cuadrado
Desde una coordenada



``` r
coordenadas <- c(38.29782, -76.51390)

coordenadas |> 
  st_point() |>
  st_sfc() |>
  st_buffer(dist = 30000)  |> 
  st_bbox() |> 
  st_as_sfc() |>
  st_as_sf()
```

```
## Simple feature collection with 1 feature and 0 fields
## Geometry type: POLYGON
## Dimension:     XY
## Bounding box:  xmin: -29961.7 ymin: -30076.51 xmax: 30038.3 ymax: 29923.49
## CRS:           NA
##                                x
## 1 POLYGON ((-29961.7 -30076.5...
```



<!--
Desde el centroide de un polígono














































