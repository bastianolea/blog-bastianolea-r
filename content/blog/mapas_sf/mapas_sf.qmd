---
title: Mapas y visualización de datos geoespaciales en R con {sf}
author: Bastián Olea Herrera
date: '2025-10-22'
draft: false
freeze: false
slug: []
categories:
  - tutoriales
tags:
  - mapas
  - visualización de datos
format:
  hugo-md:
    output-file: index
    output-ext: md
links:
  - icon: registered
    icon_pack: fas
    name: SF
    url: https://r-spatial.github.io/sf/
execute:
  eval: false
  cache: false
excerpt: "R cuenta con un muy amplio ecosistema de paquetes para datos geoespaciales. Uno de los paquetes más importantes es `{sf}`, que permite manipular datos espaciales a partir del estándar _simple features_ (características simples), ampliamente utilizado en sistemas de información geográfica (SIG/GIS). En esta guía iré guardando los comandos que uso frecuentemente para manipular y visualizar datos geoespaciales en R. En la medida que voy aprendiendo más sobre hacer mapitas, iré actualizando y complementando."
---

{{< imagen "mapa_rm_featured.png" >}}

{{< aviso "⚠️ Este tutorial se encuentra en construcción! ⚠️" >}}

R cuenta con un muy amplio [ecosistema](https://github.com/r-spatial/) de paquetes para datos geoespaciales. Uno de los [paquetes más importantes es `{sf}`](https://r-spatial.github.io/sf/), que permite manipular datos espaciales a partir del estándar _simple features_ (características simples), ampliamente utilizado en sistemas de información geográfica (SIG/GIS).

En esta guía iré guardando los comandos que uso frecuentemente para **manipular, transformar y visualizar datos geoespaciales** en R. En la medida que voy aprendiendo más sobre hacer mapitas, iré actualizando y complementando.

Lo inicial es instalar `{sf}`:

```{r}
#| eval: false
install.packages("sf")
```

Y cargarlo junto a `{dplyr}` para empezar a trabajar con datos geoespaciales.
```{r}
#| message: false
#| eval: true

library(sf)
library(dplyr)
```

```{r}
#| echo: false
#| eval: true

library(ggplot2)

```

```{r tema}
#| eval: true
#| echo: false

library(ggplot2)

# tema de colores
thematic::thematic_on(fg = "#553A74",
                      bg = "#EAD2FA",
                      accent = "#9069C0")

# especificar temas
theme_set(
  # fondo transparente para mapas
  theme(plot.background = element_rect(fill = "transparent", color = "transparent")) +
    # borrar líneas feas
    theme(axis.ticks = element_blank())
)
```

**Nota:** para simplificar, en este tutorial voy a ocultar el código de los gráficos, pero siempre estará disponible bajo flechitas que despliegan el código, como la siguiente:

{{< detalles "**Ver código para los gráficos**" >}}

```{r}
library(ggplot2)

# tema de colores
thematic::thematic_on(fg = "#553A74",
                      bg = "#EAD2FA",
                      accent = "#9069C0")

theme_set(
  # fondo transparente para mapas
  theme(plot.background = element_rect(fill = "transparent", color = "transparent")) +
    # borrar líneas feas
    theme(axis.ticks = element_blank())
)
```
{{< /detalles >}}

<br>

{{< indice >}}

----


## Carga de mapas

Una de las fuentes principales de datos geoespaciales son los _shapefiles_. Pero también existen **paquetes de R que contienen información geoespacial**, para mayor conveniencia. Exploraremos ambas opciones a continuación.


### Cargar mapas de cualquier país

Si no tenemos o no queremos descargar _shapes_, podemos **cargar mapas de cualquier país directo en R** gracias a [`{rnaturalearth}`](http://ropensci.github.io/rnaturalearth/). Con este paquete obtenemos directamente mapas de cualquier país del mundo, incluyendo sus estados o regiones internos, sin necesidad de descargas.

Instala `{rnaturalearth}` si no lo tienes:

```{r}
#| eval: false
install.packages("rnaturalearth")
```

Puedes insertar el nombre de tu país para seguir con este tutorial usando ejemplos de tu territorio.

```{r rnaturalearth}
#| eval: true

# install.packages("rnaturalearth")
library(rnaturalearth)

pais <- ne_states("Argentina")
# pais <- ne_states("Mexico")
# pais <- ne_states("Colombia")

mapa <- pais |> 
  # seleccionar columnas
  select(pais = admin,
         region = name_es,
         geometry)

mapa
```


### Cargar _shapes_

Un _shapefile_ es un formato de archivo común para datos geoespaciales, que en realidad consiste en una **carpeta** con archivos relacionados (`.shp`, `.shx`, `.dbf`, entre otros) que juntos representan la geometría y atributos de los objetos geográficos.

Teniendo la carpeta, basta con cargarla con la función `read_sf()`.

{{< detalles "**Ejemplo de descarga y carga de un _shapefile_ de Chile**" >}}

Para aprender, podemos descargar un _shape_ y usarlo para practicar. Si no tienes uno a mano, en el siguiente botón podemos bajar un _shapefile_ de Chile por regiones, que proviene de la [Mapoteca de la Biblioteca del Congreso Nacional](https://www.bcn.cl/siit/mapas_vectoriales).

{{< boton "Division regional: polígonos de las regiones de Chile" "https://www.bcn.cl/obtienearchivo?id=repositorio/10221/10398/2/Regiones.zip" "fas fa-map">}}

También puedes descargarlo directamente desde R con `download.file()` y luego `unzip()`, [como se indica en este post](/blog/mapa_chile_triple/#descargar-mapas).


Una vez descargado, descomprimimos el archivo y obtenemos una **carpeta**. Esta carpeta es nuestro _shapefile_, así que la guardamos dentro de nuestro [proyecto de RStudio](/blog/r_introduccion/proyectos/), idealmente dentro de una carpeta donde guardemos nuestros mapas. 

```{r}
#| eval: false
# descargar
download.file("https://www.bcn.cl/obtienearchivo?id=repositorio/10221/10398/2/Regiones.zip",
              "Regiones.zip")

# descomprimir
unzip("Regiones.zip", exdir = "shapes/Regiones")
```

En el siguiente ejemplo, guardamos el _shapefile_ en una carpeta `shapes`, y lo cargamos con `read_sf()`.

```{r preprocesar}
#| echo: false
#| eval: false

# cargar
mapa <- read_sf("shapes/Regiones") |> 
  janitor::clean_names()

# simplificar
mapa <- mapa |> rmapshaper::ms_simplify(keep = 0.02)

# reproyectar
# mapa <- mapa |> st_transform(crs = 5360)

# guardar
readr::write_rds(mapa, "mapa.rds")
```

```{r carga_rapida}
#| echo: false
#| eval: true
mapa_chile <- readr::read_rds("mapa.rds")
```

```{r cargar_falso}
#| eval: false
#| echo: true

mapa <- read_sf("shapes/Regiones") |> 
  janitor::clean_names()

mapa
```

```{r}
#| eval: true
#| echo: false
#| output: true
mapa_chile
```

{{< /detalles >}}

{{< aviso "Puedes seguir este tutorial independientemente del mapa que hayas cargado (el _shape_ de Chile, con `rnaturalearth`, u otro _shape_ que tú elijas); lo importante es que cargues un objeto `mapa` que tenga columna `geometry` y `region`." >}}

<!--
### Cargar geoJSON


### Cargar KMZ
```{r}
unzip("~/Downloads/Mis lugares.kmz", exdir = "~/Downloads/Mis lugares")

sf::read_sf("~/Downloads/Mis lugares/doc.kml")

```

-->

----

Como vemos, una vez que cargamos los datos geoespaciales obtenemos una **tabla con características especiales**. Arriba de la tabla vemos una descripción de las características del mapa, el tipo de geometrías, la caja o _bounding box_ que enmarca los polígonos, y el sistema de referencia de coordenadas del mapa.

En `{sf}` los datos geoespaciales además contienen una columna `geometry`, que contiene las geometrías (puntos, líneas o polígonos) que definen la forma y ubicación de los elementos geográficos. Vamos a trabajar con esta columna si queremos **modificar la geometría** de los elementos geoespaciales o calcular algo a partir de ellos. **Cada fila de la tabla representa un objeto geográfico** (una región, comuna, país, etc.) y las demás columnas son variables relacionadas al objeto geográfico (población, superficie, nombre, etc.)


<!--
## Glosario

- **Simple features**: estándar para representar datos geoespaciales en forma de tablas con una columna especial de geometría.
- **Shapefile**: formato de archivo común para datos geoespaciales, que en realidad consiste en varios archivos relacionados.
- **Polígono**: forma geométrica que representa áreas en un mapa.

-->

----


## Visualización básica de mapas

Para visualizar un mapa con `{sf}` usamos la geometría `geom_sf()` dentro de un gráfico de `{ggplot2}`. Esta función reconoce automáticamente la columna `geometry` del objeto espacial, y dibuja las formas geográficas correspondientes.

```{r mapa_basico}
#| eval: true

mapa |> 
  ggplot() +
  geom_sf(fill = "#9069C0", 
          color = "#EBD2FA",
          linewidth = 0.1)
```

{{< aviso "Si necesitas aprender lo básico de `{ggplot2}` para visualización de datos, [revisa este completo tutorial](/blog/r_introduccion/tutorial_visualizacion_ggplot/)." >}}


----

## Operaciones sobre geometrías

Las operaciones sobre geometrías permiten manipular y analizar las formas y ubicaciones de los objetos geográficos. A continuación veremos algunas operaciones comunes que se pueden realizar con el paquete `{sf}` en R.

### Calcular centroide

El centroide es el punto central de un polígono. Calcularlo sirve, por ejemplo, para ubicar una etiqueta de texto sobre un polígono, poner un punto sobre un territorio que crece con respecto a una variable, etc.

```{r}
#| eval: true

mapa_centroide <- mapa |> 
  select(region, geometry) |> 
  mutate(centroide = st_centroid(geometry))
```

```{r}
#| eval: true
#| echo: false
mapa_centroide |> 
  select(region, centroide) |> 
  st_drop_geometry()
```


```{r mapa_centroide}
#| eval: true
#| echo: false
#| message: false
#| warning: false
mapa_centroide |> 
  filter(region == mapa$region[3]) |> 
  ggplot() +
  geom_sf(fill = "#9069C0", 
          linewidth = NA) +
  geom_sf(
    aes(geometry = centroide),
    size = 3, alpha = .6) +
  geom_sf_text(
    aes(geometry = centroide),
    label = "centroide", size = 3,
    vjust = 2)
```

{{< detalles "Ver código del gráfico" >}}
```{r}
mapa_centroide |> 
  filter(region == mapa$region[3]) |> 
  ggplot() +
  geom_sf(fill = "#9069C0", 
          linewidth = NA) +
  geom_sf(
    aes(geometry = centroide),
    size = 3, alpha = .6) +
  geom_sf_text(
    aes(geometry = centroide),
    label = "centroide", size = 3,
    vjust = 2)
```
{{< /detalles >}}


----

### Extraer longitud y latitud
Para obtener las coordenadas (longitud y latitud) de un elemento espacial, necesitamos primero que sea un punto, porque un polígono es una figura compleja que no tiene solamente una latitud y una longitud. Si tenemos un polígono, [primero calculamos el centroide](#calcular-centroide), y luego extraemos las coordenadas con `st_coordinates()`. Como esta función retorna la longitud y latitud de cada punto al mismo tiempo, tenemos que pedirle que entregue la una o la otra usando corchetes.

```{r}
#| eval: true

mapa_centroide_coordenadas <- mapa_centroide |> 
  mutate(lon = st_coordinates(centroide)[,1],
         lat = st_coordinates(centroide)[,2])
```

```{r}
#| eval: true
#| echo: false
mapa_centroide_coordenadas |> 
  select(region, lon, lat) |> 
  st_drop_geometry()
```


```{r barras_latitud}
#| echo: false
#| eval: true

mapa_centroide_coordenadas |> 
  distinct(region, .keep_all = TRUE) |> 
  mutate(region = forcats::fct_reorder(region, lat)) |> # ordenar regiones
  ggplot() +
  aes(abs(lat), region) +
  geom_col(width = 0.7, fill = "#9069C0") +
  geom_text(
    aes(label = region),
    size = 3, hjust = 1.05, color = "#EAD2FA") +
  scale_y_discrete(labels = NULL) +
  labs(y = NULL, x = "Latitud")
```

{{< detalles "Ver código del gráfico" >}}
```{r}
mapa_centroide_coordenadas |> 
  distinct(region, .keep_all = TRUE) |> 
  mutate(region = forcats::fct_reorder(region, lat)) |> # ordenar regiones
  ggplot() +
  aes(lat, region) +
  geom_col(width = 0.7, 
           fill = "#9069C0") +
  geom_text(aes(label = region),
            size = 3, hjust = -0.05, color = "#EAD2FA") +
  scale_y_discrete(labels = NULL) +
  labs(y = NULL, x = "Latitud")
```
{{< /detalles >}}


----


### Calcular buffer
Un _buffer_ es una zona alrededor de un objeto geográfico, definida por una distancia específica. Calcular un _buffer_ es útil para analizar áreas de influencia, proximidad a ciertos puntos o regiones, o para hacer modificiones sobre mapas con fines de visualización.

Con la función `st_buffer()` definimos el espacio en torno a un polígono, especificando en el argumento `dist` la **distancia** del _buffer_ en las unidades del sistema de coordenadas del mapa (por ejemplo, metros si el mapa está en UTM), y con `max_cells` podemos controlar la calidad del polígono resultante.

```{r}
#| eval: true

mapa_buffer <- mapa |> 
  # filtrar una región/polígono
  filter(region == mapa$region[3]) |> 
  # crear buffer
  mutate(buffer = st_buffer(geometry, 
                            dist = 20000,
                            max_cells = 10000))
```

```{r mapa_buffer}
#| eval: true
#| echo: false

mapa_buffer |> 
  ggplot() +
  # capa de la región
  geom_sf(aes(geometry = geometry), 
          fill = "#9069C0", linewidth = NA) +
  # capa del buffer
  geom_sf(aes(geometry = buffer), 
          fill = "#9069C0", alpha = 0.5, linewidth = NA)
```

{{< detalles "Ver código del gráfico" >}}
```{r}
mapa_buffer |> 
  ggplot() +
  # capa de la región
  geom_sf(aes(geometry = geometry), 
          fill = "#9069C0", linewidth = NA) +
  # capa del buffer
  geom_sf(aes(geometry = buffer), 
          fill = "#9069C0", alpha = 0.5, linewidth = NA)
```
{{< /detalles >}}

----

### Calcular caja de un polígono

Con la función `st_bbox()` obtenemos las coordenadas de la caja que envuelve a un polígono o conjunto de polígonos. Esta caja está definida por las coordenadas mínimas y máximas en los ejes _x_ (longitud) e _y_ (latitud).

```{r}
#| eval: true

caja <- st_bbox(mapa)

caja
```



#### Convertir caja a polígono

Teniendo una caja con sus coordenadas, podemos convertirla a un polígono para aplicarlo sobre (o debajo de) un mapa.

```{r}
#| eval: true

rectangulo <- caja |> 
  st_as_sfc(crs = st_crs(mapa))

```

```{r}
#| eval: true
#| echo: false

ggplot() +
  # mapa de fondo
  geom_sf(data = mapa,
          fill = "#9069C0", color = "#EBD2FB",
          linewidth = 0.1) +
  # capa con la caja encima
  geom_sf(data = rectangulo,
          fill = "#9069C0", color = "#9069C0", 
          linewidth = 0.8,
          alpha = 0.4) +
  # tema
  theme(axis.text = element_blank(),
        panel.background = element_blank())
```

{{< detalles "Ver código del gráfico" >}}
```{r}
ggplot() +
  # mapa de fondo
  geom_sf(data = mapa,
          fill = "#9069C0", color = "#EBD2FB",
          linewidth = 0.1) +
  # capa con la caja encima
  geom_sf(data = rectangulo,
          fill = "#9069C0", color = "#9069C0", 
          linewidth = 0.8, alpha = 0.4) +
  # tema
  theme(axis.text = element_blank(),
        panel.background = element_blank())
```
{{< /detalles >}}


----


### Poner un punto en un mapa

Si queremos poner puntos en posiciones específicas de un mapa, sólo necesitamos crear una tabla con las coordenadas de los puntos y convertir la tabla a `sf` con `st_as_sf()`. Al hacer esto, es necesario especificar el sistema de referencia de coordenadas (CRS) del mapa, para que los puntos se ubiquen correctamente. Hacemos esto extrayendo el CRS del mapa con `st_crs()` y aplicándolo a nuestra nueva tabla `sf`.

```{r}
#| eval: true
#| message: false

# definir coordenadas
coordenadas <- tibble(longitud = -70, 
                      latitud = -38)

# convertir tabla a sf
punto <- coordenadas |> 
  st_as_sf(coords = c("longitud", "latitud"), 
           crs = st_crs(mapa))
```


```{r}
#| eval: true
#| echo: false

ggplot() +
  # mapa de fondo
  geom_sf(data = mapa,
          fill = "#9069C0", color = "#EBD2FB",
          linewidth = 0.1) +
  # capa con puntos
  geom_sf(data = punto,
          size = 3, alpha = .5)
```

{{< detalles "Ver código del gráfico">}}
```{r}
ggplot() +
  # mapa de fondo
  geom_sf(data = mapa,
          fill = "#9069C0", color = "#EBD2FB",
          linewidth = 0.1) +
  # capa con el punto
  geom_sf(data = punto,
          size = 3, alpha = .5)
```
{{< /detalles >}}



#### Poner varios puntos en un mapa

Si necesitamos agregar más de un punto, simplemente hacemos una tabla con todos los que necesitemos. Obviamente también podemos especificar otras columnas que podemos usar para etiquetar los puntos, especificar sus colores, y más.

```{r}
#| eval: true
#| message: false
coordenadas <- tribble(~nombre, ~lon, ~lat, ~n,
                       "A",  -69,  -38,  4,
                       "B",  -65,  -37,  6,
                       "C",  -61,  -36,  9)

puntos <- coordenadas |> 
  # convertir tabla a sf
  st_as_sf(coords = c("lon", "lat"), 
           crs = st_crs(mapa))

```

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
ggplot() +
  # mapa de fondo
  geom_sf(data = mapa,
          fill = "#9069C0", color = "#EBD2FB",
          linewidth = 0.1) +
  # capa con puntos
  geom_sf(data = puntos,
          aes(size = n),
          alpha = .5) +
  # capa con textos
  geom_sf_label(data = puntos,
                aes(label = nombre),
                size = 3, vjust = -0.8,
                fontface = "bold") +
  # escala de tamaño
  scale_size(range = c(3, 6),
             breaks = scales::breaks_pretty(n = 3)) +
  guides(size = guide_legend(override.aes = list(color = "#9069C0", 
                                                 alpha = 1)))
```
{{< detalles "Ver código del gráfico">}}
```{r}
ggplot() +
  # mapa de fondo
  geom_sf(data = mapa,
          fill = "#9069C0", color = "#EBD2FB",
          linewidth = 0.1) +
  # capa con puntos
  geom_sf(data = puntos,
          aes(size = n),
          alpha = .5) +
  # capa con textos
  geom_sf_label(data = puntos,
                aes(label = nombre),
                size = 3, vjust = -0.8,
                fontface = "bold") +
  # escala de tamaño
  scale_size(range = c(3, 6),
             breaks = scales::breaks_pretty(n = 3)) +
  guides(size = guide_legend(override.aes = list(color = "#9069C0", 
                                                 alpha = 1)))
```
{{< /detalles >}}

----


### Crear un cuadrado

Para poner un cuadrado encima de una ubicación del mapa, primero creamos un punto, luego lo [expandimos con un _buffer_](#calcular-buffer), calculamos [la caja que envuelve a dicho punto](#calcular-caja-de-un-polígono), y finalmente convertimos la caja en un polígono `sf`.

```{r}
#| eval: true
coordenadas <- tibble(longitud = -58, latitud = -38)

punto <- coordenadas |> 
  # convertir tabla a sf
  st_as_sf(coords = c("longitud", "latitud"), 
           crs = st_crs(mapa))

cuadrado <- punto |> 
  st_buffer(dist = 100000) |> # agrandar punto
  st_bbox() |> # crear caja al rededor
  st_as_sfc(crs = st_crs(mapa)) # convertir a sf
```


```{r}
#| eval: true
#| echo: false

ggplot() +
  # mapa de fondo
  geom_sf(data = mapa,
          fill = "#9069C0", color = "#EBD2FB",
          linewidth = 0.1, alpha = .7) +
  # capa con puntos
  geom_sf(data = cuadrado,
          fill = NA,
          linewidth = 0.8, 
          linejoin = "mitre", #linejoin = "round",
          color = "#402E5A") +
  coord_sf(xlim = c(-72, -56),
           ylim = c(-40, -30))
```

{{< detalles "Ver código del gráfico">}}
```{r}
ggplot() +
  # mapa de fondo
  geom_sf(data = mapa,
          fill = "#9069C0", color = "#EBD2FB",
          linewidth = 0.1, alpha = .7) +
  # capa con puntos
  geom_sf(data = cuadrado,
          fill = NA,
          linewidth = 0.8, 
          linejoin = "mitre", #linejoin = "round",
          color = "#402E5A") +
  coord_sf(xlim = c(-72, -56),
           ylim = c(-40, -30))
```
{{< /detalles >}}

Paso a paso, el proceso de crear el punto, agrandarlo, y formarlo en un cuadrado se vería así:

```{r}
#| eval: true
#| echo: false

punto_grande <- punto |> 
  st_buffer(dist = 100000, max_cells = 10000)

cuadrado <- punto_grande |> 
  st_bbox() |> 
  st_as_sfc(crs = st_crs(mapa))

ggplot() +
  # mapa de fondo
  geom_sf(data = mapa,
          fill = "#9069C0", color = "#EBD2FB",
          linewidth = 0.1) +
  # capas 
  geom_sf(data = punto, 
          color = "#402E5A", size = 2) +
  geom_sf(data = punto_grande,
          fill = NA, color = "#402E5A", lwd = 0.7) +
  geom_sf(data = cuadrado,
          fill = NA, color = "#402E5A", lwd = 0.7) +
  # acercar mapa
  coord_sf(xlim = c(-61, -55),
           ylim = c(-40, -35.7))
```

{{< detalles "Ver código del proceso y del gráfico">}}
```{r}
punto_grande <- punto |> 
  st_buffer(dist = 100000, max_cells = 10000)

cuadrado <- punto_grande |> 
  st_bbox(crs = st_crs(mapa)) |> 
  st_as_sfc() |> 
  st_as_sf(crs = st_crs(mapa))

ggplot() +
  # mapa de fondo
  geom_sf(data = mapa,
          fill = "#9069C0", color = "#EBD2FB",
          linewidth = 0.1) +
  # capas 
  geom_sf(data = punto, 
          color = "#402E5A", size = 3) +
  geom_sf(data = punto_grande,
          fill = NA, color = "#402E5A", lwd = 0.7) +
  geom_sf(data = cuadrado,
          fill = NA, color = "#402E5A", lwd = 0.7) +
  # acercar mapa
  coord_sf(xlim = c(-61, -55),
           ylim = c(-40, -35.7))
```
{{< /detalles >}}


#### Crear un rectángulo a partir de puntos
Si tenemos varios puntos y necesitamos crear un rectángulo que los contenga a todos, podemos repetir lo anterior pero partiendo de varios puntos a la vez.

```{r}
#| eval: true
#| echo: true
#| message: false
# tabla con coordenadas
coordenadas <- tribble(~nombre, ~lon, ~lat, ~n,
                       "A",  -69,  -38,  4,
                       "B",  -65,  -37,  6,
                       "C",  -61,  -36,  9)

# convertir coordenadas a puntos
puntos <- coordenadas |> 
  # convertir tabla a sf
  st_as_sf(coords = c("lon", "lat"), 
           crs = st_crs(mapa))

# convertir puntos a rectándulo
rectangulo <- puntos |> 
  st_buffer(dist = 80000) |> # ampliar
  st_bbox() |> 
  st_as_sfc(crs = st_crs(mapa))
```

```{r}
#| eval: true
#| echo: false
#| message: false

ggplot() +
  # mapa de fondo
  geom_sf(data = mapa,
          fill = "#9069C0", color = "#EBD2FB",
          linewidth = 0.2, alpha = .7) +
  # capa con puntos
  geom_sf(data = puntos,
          alpha = .5) +
  geom_sf(data = rectangulo,
          fill = NA, color = "#402E5A", lwd = 0.7)
```
{{< detalles "Ver código del gráfico">}}
```{r}
ggplot() +
  # mapa de fondo
  geom_sf(data = mapa,
          fill = "#9069C0", color = "#EBD2FB",
          linewidth = 0.2, alpha = .7) +
  # capa con puntos
  geom_sf(data = puntos,
          alpha = .5) +
  geom_sf(data = rectangulo,
          fill = NA, color = "#402E5A", lwd = 0.7)
```
{{< /detalles >}}


----

### Crear un polígono a partir de coordenadas

Teniendo una tabla con un conjunto de coordenadas, podemos unirlas para formar un polígono. Es decir, **unir los puntos** para conformar una figura geométrica cerrada. Para ello, usamos `st_combine()` para combinar las coordenadas en un solo elemento, y luego `st_cast()` para convertir esos puntos combinados en un polígono.

```{r}
#| eval: true
 
coordenadas <- tribble(~nombre, ~lon, ~lat,
                           "A", -68,  -36,
                           "B", -64,  -31,
                           "C", -60,  -36)

# convertir tabla a sf
puntos <- coordenadas |> 
  st_as_sf(coords = c("lon", "lat"), 
           crs = st_crs(mapa))

poligono <- puntos |> 
  # combinar coordenadas en un solo elemento
  summarise(geometry = st_combine(geometry)) |> 
  # convertir puntos a polígono
  st_cast("POLYGON")
```

```{r poligonos_1}
#| eval: true
#| echo: false
 
ggplot() +
  # mapa de fondo
  geom_sf(data = mapa,
          fill = "#9069C0", color = "#E0C7F0",
          linewidth = 0.2, alpha = 0.7) +
  # capa con puntos
  geom_sf(data = puntos,
          alpha = .6) +
  # capa con polígono
  geom_sf(data = poligono,
          fill = "#402E5A", color = "#402E5A",
          lwd = 0.7, alpha = 0.7)
```

{{< detalles "Ver código del gráfico" >}}
```{r}
ggplot() +
  # mapa de fondo
  geom_sf(data = mapa,
          fill = "#9069C0", color = "#E0C7F0",
          linewidth = 0.2, alpha = 0.7) +
  # capa con puntos
  geom_sf(data = puntos,
          alpha = .6) +
  # capa con polígono
  geom_sf(data = poligono,
          fill = "#402E5A", color = "#402E5A",
          lwd = 0.7, alpha = 0.7)
```
{{< /detalles >}}


#### Crear varios polígonos a partir de coordenadas

Podemos realizar el mismo proceso anterior, pero agrupando los datos con `group_by()` para crear varios polígonos a la vez, de acuerdo a la variable de agrupación (en este caso, `tipo`). Entonces, cuando usemos `st_combine()`, se combinarán las coordenadas de cada grupo por separado, y luego `st_cast()` convertirá cada grupo de puntos combinados en un polígono distinto.

```{r}
#| eval: true
 
coordenadas <- tribble(~tipo,    ~lon, ~lat,
                       "Triángulo", -68,  -30,
                       "Triángulo", -64,  -25,
                       "Triángulo", -60,  -30,
                        "Cuadrado", -68,  -38,
                        "Cuadrado", -60,  -38,
                        "Cuadrado", -60,  -32,
                        "Cuadrado", -68,  -32)

# convertir tabla a sf
puntos <- coordenadas |> 
  st_as_sf(coords = c("lon", "lat"), 
           crs = st_crs(mapa))

poligono <- puntos |> 
  # combinar coordenadas en elementos únicos agrupados por una variable
  group_by(tipo) |> 
  summarise(geometry = st_combine(geometry)) |> 
  # convertir puntos a polígono
  st_cast("POLYGON")
```

```{r poligonos_2}
#| eval: true
#| echo: false
 
ggplot() +
  # mapa de fondo
  geom_sf(data = mapa,
          fill = "#9069C0", color = "#E0C7F0",
          linewidth = 0.2, alpha = 0.7) +
  # capa con polígonos de color
  geom_sf(data = poligono,
          aes(fill = tipo, color = tipo),
          lwd = 0.6, alpha = .7) +
  # capa con puntos
  geom_sf(data = puntos,
          alpha = .4) +
  # escala de colores
  labs(fill = "Tipo", color = "Tipo") +
  theme(legend.key.spacing.y = unit(1, "mm"))
```

{{< detalles "Ver código del gráfico" >}}
```{r}
ggplot() +
  # mapa de fondo
  geom_sf(data = mapa,
          fill = "#9069C0", color = "#E0C7F0",
          linewidth = 0.2, alpha = 0.7) +
  # capa con polígonos de color
  geom_sf(data = poligono,
          aes(fill = tipo, color = tipo),
          lwd = 0.6, alpha = .7) +
  # capa con puntos
  geom_sf(data = puntos,
          alpha = .4) +
  # escala de colores
  labs(fill = "Tipo", color = "Tipo") +
  theme(legend.key.spacing.y = unit(1, "mm"))
```
{{< /detalles >}}

----

<!--
Desde el centroide de un polígono
```{r}
mapa |> 
filter(region == "Región de Antofagasta") |>
st_centroid() |> 
st_buffer(dist = 8000) |> 
st_bbox() |> 
st_as_sfc() |>
st_as_sf()
```
-->

<!--
### Calcular superficie o área
```{r}
mapa_region_comunas_areas |> 
st_union() |> 
st_area() |> 
units::set_units("km^2")
```



### Recortar polígono a coordenadas
```{r}
st_crop(xmin = -74, ymin = -36, xmax = -65, ymax = -30) |> 
```


### Simplificar un polígono
```{r}
https://bookdown.org/robinlovelace/geocompr/geometric-operations.html#simplification
st_simplify(dTolerance = 0.01)

rmapshaper::ms_simplify(geometry, keep = 0.8)) 


```


### Extraer líneas internas de un polígono
```{r}
ms_innerlines() # deja solo las líneas interiores de un coso
```


## Correcciones
```{r}
st_as_sf()
```


```{r}
st_make_valid()
```

```{r}
st_drop_geometry() 
```


----


## Operaciones agrupadas

### Unir polígonos
```{r}
group_by() |> 
st_union()
```


## Operaciones entre geometrías

### Recortar un polígono con otro
https://bookdown.org/robinlovelace/geocompr/geometric-operations.html#clipping

```{r}
st_intersection()
```

### Usar un polígono para eliminar partes de otro
```{r}
st_difference()
```


### unir dos polígonos
```{r}
st_union()
```

### Spatial join

### Filter
```{r}
https://cengel.github.io/R-spatial/spatialops.html#topological-subsetting-select-polygons-by-location
```



## Coordenadas

### Extraer sistema de coordenadas
```{r}
st_crs(comunas_region)
```

### Cambiar coordenadas
```{r}
st_transform(crs = st_crs(comunas_region))
```


## Visualización

### Visualizar por capas
```{r}
geom_sf()
```


### Texto
```{r}
geom_sf_text(data = nombres_areas |> filter(clase_topo == "Comuna"), color = "red", fontface = "bold",
aes(label = nombre)) + 
```

### Texto con repel
https://github.com/slowkow/ggrepel/issues/111#issuecomment-416853013
```{r}
ggrepel::geom_label_repel(data = comunas_region_conteo_urbanas,
aes(label = comuna, geometry = geometry),
stat = "sf_coordinates",
size = 2, box.padding = 0,
min.segment.length = unit(3, "mm"),
label.padding = 0.15, label.size = 0
) +
```


### Hacer zoom
```{r}
#   coord_sf(xlim = c(-70.4, -70.2),
#            ylim = c(-18.7, -18.4),
```

### Dibujar un cuadrado
```{r}
#   annotate("rect", fill = NA, color = "black", linewidth = 1,
#            xmin = bbox_area_met[1]-2000, xmax = bbox_area_met[2]+2000,
#            ymin = bbox_area_met[3]+2000, ymax = bbox_area_met[4]-2000)+
```

### Escala de colores para mapa de calor

```{r}
scale_fill_gradient2(
low = color$bajo, mid = color$medio, high = color$alto,
midpoint = mean(comunas_region_conteo$n),
na.value = col_mix(color$fondo, color$principal, 0.1),
limits = c(0, NA)
# breaks = cortes
)
```


### Minimapa
https://dominicroye.github.io/blog/inserted-map/
```{r}

```

-->

{{< aviso "⚠️ Este tutorial se encuentra en construcción ⚠️" >}}

----


## Recursos para aprender más

### Apuntes
<div style="display: flex; margin:auto;">
{{< imagen "sf_cheatsheet_1.jpeg" >}}
{{< imagen "sf_cheatsheet_2.jpeg" >}}
</div>


### Libros

- [Drawing beautiful maps programmatically with R, sf and ggplot2](https://r-spatial.org/r/2018/10/25/ggplot2-sf.html)
- [Geocomputation with R](https://bookdown.org/robinlovelace/geocompr/)
- [Spatial Data Science With Applications in R](https://r-spatial.org/book/)
- [Using Spatial Data with R](https://cengel.github.io/R-spatial/)