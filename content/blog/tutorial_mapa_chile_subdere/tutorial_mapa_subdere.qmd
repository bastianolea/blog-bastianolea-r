---
title: Crea un mapa de Chile desde datos geoespaciales oficiales en R
author: Basti치n Olea Herrera
date: '2025-10-14'
draft: false
freeze: true
slug: []
categories:
  - tutoriales
tags:
  - mapas
  - ggplot2
  - gr치ficos
  - ciencias sociales
  - Chile
format:
  hugo-md:
    output-file: index
    output-ext: md
excerpt: En este tutorial aprenderemos a crear mapas de Chile en R usando datos geogr치ficos o _shapes_ oficiales, obtenidos desde la Subsecretar칤a de Desarrollo Regional y Administrativo (Subdere) y la Biblioteca del Congreso Nacional de Chile. El objetivo ser치 aprender a visualizar mapas desde _shapefiles_ obtenidos de internet, y a procesar datos geogr치ficos m치s complejos con R, para generar mapas de Chile con pol칤gonos y l칤mites geogr치ficamente correctos.

---

En post anteriores mostr칠 c칩mo hacer [mapas comunales y regionales de Chile](/blog/tutorial_mapa_chile/) con R, y a hacer [mapas de los territorios urbanos del pa칤s](/blog/tutorial_mapa_urbano/).

En este tutorial aprenderemos a crear mapas de Chile en R usando datos geogr치ficos o _shapes_ oficiales de Chile, obtenidos desde la [Subsecretar칤a de Desarrollo Regional y Administrativo](https://ide.subdere.gov.cl/descargas-con-filtros/) (Subdere) y la [Biblioteca del Congreso Nacional de Chile](https://www.bcn.cl/siit/mapas_vectoriales) (BCN). 

El objetivo ser치 aprender a visualizar mapas desde _shapefiles_ obtenidos de internet, y a procesar datos geogr치ficos m치s complejos con R, para generar mapas de Chile con pol칤gonos y l칤mites geogr치ficamente correctos.

## Obtener datos geogr치ficos

El primer paso para visualizar mapas es obtener los datos geogr치ficos. Con esto nos referimos a los pol칤gonos (figuras geom칠tricas que usualmente representan territorios), l칤neas (que pueden representar l칤mites o redes viales) y puntos (que pueden representar ubicaciones como municipios o capitales).

Los datos geogr치ficos suelen venir como _shapes_, que usualmente son carpetas que contienen archivos, principalmente  _shapefiles_ (.shp). 

Los siguientes botones ofrecen descargas directas de los datos que usaremos desde sus fuentes originales, la mayor칤a de ellos obtenidos desde la [IDE Subdere](https://ide.subdere.gov.cl/descargas-con-filtros/).

----

La **divisi칩n pol칤tico-administrativa** contiene los pol칤gonos a nivel comunal, provincial y regional que consituyen el territorio de Chile, y provienen de la Subdere (2023):

{{< boton "Pol칤gonos de divisi칩n pol칤tico-administrativa" "https://ide.subdere.gov.cl/descargas/SHP/Limite_DPA_03082023.rar" "fas fa-file-arrow-down">}}


Los **l칤mites comunales** de la divisi칩n pol칤tico-administrativa contiene las l칤neas que limitan las unidades administrativas (comunas) del pa칤s, y provienen de la Subdere (2022):

{{< boton "L칤neas de l칤mites comunales" "https://ide.subdere.gov.cl/wp-content/uploads/74_limites_dpa_2022.zip" "fas fa-file-arrow-down">}}


Las **ubicaciones de los municipios** marcan con puntos la localizaci칩n de estas instituciones, y provienen de la Subdere (2022):

{{< boton "Puntos de ubicaci칩n de municipios del pa칤s" "https://ide.subdere.gov.cl/descargas/SHP/Municipios_15112022.zip" "fas fa-file-arrow-down">}}


La **red vial** es el conjunto de l칤neas que representan las carreteras y caminos de todo el pa칤s, y provienen de la Bibioteca del Congreso Nacional de Chile (BCN):

{{< boton "L칤neas de red vial del pa칤s" "https://www.bcn.cl/obtienearchivo?id=repositorio/10221/10403/2/Red_Vial.zip" "fas fa-file-arrow-down">}}


Alternativamente, puedes descargar los archivos desde R ejecutando este c칩digo:

```{r}
#| eval: false

dir.create("shapes") # crear carpeta

# descargar
download.file("https://ide.subdere.gov.cl/wp-content/uploads/74_limites_dpa_2022.zip",
              "shapes/74_limites_dpa_2022.zip")

download.file("https://ide.subdere.gov.cl/descargas/SHP/Limite_DPA_03082023.rar",
              "shapes/Limite_DPA_03082023.rar")

download.file("https://ide.subdere.gov.cl/descargas/SHP/Municipios_15112022.zip",
              "shapes/Municipios_15112022.zip")

download.file("https://www.bcn.cl/obtienearchivo?id=repositorio/10221/10403/2/Red_Vial.zip",
              "shapes/Red_Vial.zip")
```

Una vez que descargamos los archivos, debemos descomprimirlos para obtener las carpetas que contienen los _shapes._


## Cargar datos geogr치ficos

Para trabajar con datos geogr치ficos usamos el paquete `{sf}`, abreviaci칩n de _simple features_, que es un est치ndar para manejar datos geoespaciales. Si no tienes instalado el paquete, inst치lalo con `install.packages("sf")`.

Para leer un archivo geoespacial usamos la funci칩n `read_sf()` apuntada a la carpeta que contiene los _shapefiles_:

```{r}
#| eval: false
#| echo: true

library(sf)
library(janitor)

# pol칤gonos de comunas
comunas <- read_sf("shapes/DPA_2023/COMUNAS") |> clean_names()

# l칤mites comunales
limites <- read_sf("shapes/74_limites_dpa_2022") |> clean_names()

# ubicaci칩n de municipalidades
municipios <- read_sf("shapes/Municipios_15112022") |> clean_names()

# red vial
calles <- read_sf("shapes/Red_Vial") |> clean_names()
```

Algunos de estos mapas pueden ser muy detallados y/o complejos, por lo que pueden tardarse en cargar[^1].

```{r}
#| eval: true
#| echo: false
#| output: false

library(sf)
library(janitor)
comunas <- read_sf("/Users/bolea/Documents/Fondo Nacional de Desarrollo Comunal/fndr_ocho/shapes/DPA_2023/COMUNAS") |> clean_names()
limites <- read_sf("/Users/bolea/Documents/Fondo Nacional de Desarrollo Comunal/fndr_ocho/shapes/74_limites_dpa_2022") |> clean_names()
municipios <- read_sf("/Users/bolea/Documents/Fondo Nacional de Desarrollo Comunal/fndr_ocho/shapes/Municipios_15112022") |> clean_names()
calles <- read_sf("/Users/bolea/Documents/Fondo Nacional de Desarrollo Comunal/fndr_ocho/shapes/Red_Vial") |> clean_names()
```

Si verificamos la clase de uno de los objetos geogr치ficos cargados, vemos que una de sus clases es `sf`, pero al mismo tiempo `tbl` y `data.frame`:
```{r}
class(comunas)
```

Si lo imprimimos en la consola, confirmamos que los objetos cargados desde los _shapefiles_ son tablas de datos que arriba dicen _Simple feature collection_; es decir, son tablas de datos que adem치s tienen informaci칩n geogr치fica.

```{r}
comunas
```

Estas tablas de datos cuentan con una columna `geometry`, que contiene la informaci칩n geogr치fica de los pol칤gonos, puntos y/o l칤neas de cada observaci칩n. A su vez, encima de la tabla de datos vemos informaci칩n especial, como el tipo de geometr칤a, las dimensiones de la caja (_bounding box_), y el sistema de coordenadas de referencia (_CRS_), que indica el tipo de proyecci칩n usada.

## Visualizar mapas
Una vez cargados los _shapes_, simplemente es cosa de aplicarlos por capas a un gr치fico de `{ggplot2}`. Las capas de datos geogr치ficos se agregan con `geom_sf()`, y en este caso, que tenemos varios _shapes_, en cada capa habr칤a que definir el objeto correspondiente en el argumento `data`; es decir, cada capa se basa en datos distintos, pero que coinciden en t칠rminos de coordenadas. 

Entonces, empezamos un gr치fico con `ggplot()`, y luego vamos agregando capas de `geom_sf()`, recordando que el orden en que agreguemos las capas importa: las primeras (m치s arriba) ser치n los objetos en el fondo, y las siguientes capas (en sucesivas l칤neas) se visualizar치n encima de las anteriores.


```{r}
#| fig-width: 3
#| fig-height: 10
#| fig-dpi: 300
#| fig-format: jpeg
#| eval: false

library(dplyr)
library(ggplot2)

ggplot() +
  # capa de fondo: pol칤gonos de comunas
  geom_sf(data = comunas, aes(fill = region), linewidth = 0) +
  # l칤mites regionales encima de las comunas
  geom_sf(data = limites, color = "peachpuff4", linewidth = 0.2, alpha = 0.8) + 
  # calles
  geom_sf(data = calles |> filter(clase_ruta <= 3), color = "peachpuff4", linewidth = 0.1, alpha = 0.3) +
  # puntos de municipios
  geom_sf(data = municipios, color = "peachpuff4", size = 0.7, alpha = 0.6) + # borde oscuro
  geom_sf(data = municipios, color = "cornsilk1", size = 0.1, alpha = 0.9) + # centro claro
  # recortar Chile continental
  coord_sf(expand = FALSE,
           xlim = c(-76, -66),
           ylim = c(-56.2, -17)) +
  # paleta de colores
  colorspace::scale_fill_discrete_qualitative(
    palette = "Warm", 
    c1 = 40, # intensidad del color
    l1 = 85) + # brillo del color
  theme_minimal() +
  theme(legend.position = "none")
```

{{< imagen "mapa_chile_subdere.jpeg" >}}

A las capas de objetos geogr치ficos le especificamos el sistema de coordenadas con `coord_sf()` para recortar el mapa al territorio continental del pa칤s, y [adem치s le pusimos una escala de colores](/blog/colores/#usar-paletas-de-colores-en-ggplot2) c치lidos desde el paquete `{colorspace}`, que adem치s tiene la cualidad de poder adaptar la intensidad y brillo de sus colores.

Listo! La gracia de `{sf}` es poder entregar herramientas para cargar cualquier tipo de datos geogr치ficos y habilitar que `{ggplot2}` los pueda graficar sin problemas. A menos que ocurran problemas. Lo cual veremos [en otro post](/tags/mapas/) 游땳



[^1]: Al tratarse de mapas oficiales, estos datos geogr치ficos contienen mucho nivel de detalle; usualmente mucho m치s del necesario para hacer mapas a nivel nacional, donde el nivel de detalle es visualmente imperceptible. Dado que una mayor calidad significa mapas m치s pesados y por ende procesos m치s lentos, podemos [simplificar las geometr칤as](/blog/simplificar_mapas/) con la funci칩n `ms_simplify()` del paquete `{rmapshaper}`, como detallamos [en este post.](/blog/simplificar_mapas/) 