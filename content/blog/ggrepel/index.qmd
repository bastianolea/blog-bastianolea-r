---
title: Etiquetas de texto que se repelen entre sí en gráficos {ggplot2}
author: Bastián Olea Herrera
date: '2025-07-08'
draft: true
format:
  hugo-md:
    output-file: "index"
    output-ext: "md"
slug: []
categories: []
tags:
  - visualización de datos
  - ggplot2
  - gráficos
execute: 
  message: false
  warning: false
---


```{r}
library(arrow)

plebiscito <- read_parquet("https://github.com/bastianolea/plebiscitos_chile/raw/main/datos/plebiscito_2020_comunas.parquet")
```

```{r}
library(dplyr)

head(plebiscito)
```

```{r}
library(tidyr)

plebiscito_ancho <- plebiscito |> 
  pivot_wider(names_from = opciones, values_from = votos) |> 
  janitor::clean_names()
```

```{r}
head(plebiscito_ancho)
```

```{r}
library(dplyr)

plebiscito_comunas <- plebiscito_ancho |> 
  group_by(cut_comuna) |> 
  # calcular resultado final
  mutate(resultado = case_when(apruebo > rechazo ~ "Apruebo",
                               rechazo >= apruebo ~ "Rechazo"),
         .before = apruebo) |> 
  # calcular porcentaje de votos
  mutate(porcentaje = apruebo/(apruebo+rechazo)) |> 
  ungroup()
```

```{r}
head(plebiscito_comunas)
```


```{r}
library(ggplot2)

plebiscito_comunas |> 
  ggplot() +
  aes(rechazo, apruebo, color = resultado) +
  geom_point()
```

```{r}
library(scales)
number_options(decimal.mark = ",", big.mark = ".")

grafico_resultado <- plebiscito_comunas |> 
  ggplot() +
  aes(rechazo, apruebo, color = resultado) +
  geom_point(size = 3, alpha = 0.5) +
  scale_x_continuous(labels = label_number()) +
  scale_y_continuous(labels = label_number()) +
  theme_minimal() +
  theme(legend.text = element_text(margin = margin(l = 2))) +
  labs(x = "Rechazo", y = "Apruebo", color = "Resultado")

grafico_resultado
```

```{r}
grafico_resultado +
  geom_text(aes(label = comuna), size = 2, color = "grey30", hjust = 0)
```

```{r}
library(ggrepel)

grafico_resultado +
  geom_text_repel(aes(label = comuna), size = 2.5, color = "grey30",
                  segment.size = 0.1, point.padding = 2)
```

```{r}
grafico_resultado +
  geom_text_repel(aes(label = comuna), size = 2.5, color = "grey30",
                  segment.size = 0.1, 
                  max.overlaps = 30, max.time = 1)
```

```{r}
grafico_resultado +
  geom_text_repel(aes(label = ifelse(rechazo > 30000 | apruebo > 100000, comuna, " ")), 
                  size = 2.5, color = "grey30",
                  segment.size = 0, max.overlaps = 30)
```

Es importante dejar los puntos con un texto vacío y no sólo filtrarlos del dataset, porque así los textos se seguirán repeliendo de los puntos aunque éstos no tengan texto.

```{r}
grafico_resultado +
  coord_cartesian(xlim = c(0, 10000),
                  ylim = c(0, 50000),
                  clip = "off") +
  geom_text_repel(aes(label = ifelse(rechazo > 3000 & rechazo < 10000 | apruebo > 20000 & apruebo < 50000, comuna, " ")), 
                  size = 2.5, color = "grey30",
                  segment.size = 0, max.overlaps = 30, max.time = 5)
```

```{r}
grafico_resultado +
  geom_text_repel(aes(label = case_when(rechazo > quantile(rechazo, 0.73) ~ comuna, 
                                        apruebo > quantile(apruebo, 0.73) ~ comuna)), 
                  size = 2.5, color = "grey30", 
                  segment.size = 0, max.overlaps = 30, max.time = 5) +
  scale_x_continuous(labels = label_number(), limits = c(0, 10000)) +
  scale_y_continuous(labels = label_number(), limits = c(0, 30000)) +
  labs(x = "Rechazo (detalle)", y = "Apruebo (detalle)")
```


```{r}
library(ggiraph)
library(glue)

grafico_interactivo <- plebiscito_comunas |> 
  ggplot() +
  aes(rechazo, apruebo, color = resultado) +
  geom_point_interactive(size = 3, alpha = 0.5,
                         aes(tooltip = glue("<b>{comuna}</b>: gana {resultado} con un {percent(porcentaje, 0.1)}"))
  ) +
  geom_text_repel(aes(label = comuna), size = 2.5, color = "grey30",
                  segment.size = 0.1, point.padding = 2) +
  scale_x_continuous(labels = label_number()) +
  scale_y_continuous(labels = label_number()) +
  theme_minimal() +
  theme(legend.text = element_text(margin = margin(l = 2))) +
  labs(x = "Rechazo", y = "Apruebo", color = "Resultado")
```

```{r}
#| output: asis
#| fig.width: 7
#| fig.height: 5

girafe(ggobj = grafico_interactivo, 
       # dimensiones del gráfico
       width_svg = 7, height_svg = 5,
       # opciones para los tooltips
       options = list(
         # ocultar barra de opciones
         opts_toolbar(hidden = "selection", saveaspng = FALSE),
         # color al poner el cursor encima
         opts_hover(css = "fill: white; stroke: black;"),
         # personalizar la apariencia del tooltip
         opts_tooltip(opacity = 0.7, use_fill = TRUE,
                      css = "font-family: sans-serif; font-size: 70%; color: white; padding: 4px; border-radius: 5px;"))
)
```

