---
title: Unir o cruzar datos con left_join()
author: Basti치n Olea Herrera
date: '2025-08-16'
draft: true
format:
  hugo-md:
    output-file: "index"
    output-ext: "md"
slug: []
categories: []
tags:
  - procesamiento de datos
  - limpieza de datos
---



El _left join_ es una de las operaciones b치sicas del trabajo con datos, en el sentido de que realiza una operaci칩n sencilla que a la vez es muy 칰til. Sirve tanto para limpiar datos como para procesarlos y obtener nuevas relaciones entre ellos.

Un _left join_ realiza uni칩n o combinaci칩n entre dos tablas de datos a partir de una variable en com칰n o _llave_ (_key_). En otras palabras, un _left join_ toma dos tablas que tienen datos distintos, pero que a la vez comparten una variable o columna en com칰n, y usa esta variable en com칰n para **unir las observaciones de ambas tablas**.



{{< imagen "left_join_a.png" >}}


{{< bajada "Esquema de una uni칩n entre tablas con _left join_" >}}




En el ejemplo anterior, tenemos dos tablas, ambas con tres variables distintas, pero en ambas tablas tenemos una variable que contiene informaci칩n equivalente. En la vida real, esto podr칤an ser nombres de personas, nombres de pa칤ses, identificadores 칰nicos de personas o instituciones, fechas, etc칠tera. Esta variable compartida entre las tablas es la **llave** que usaremos para la uni칩n.

Al realiazr la uni칩n con _left join_ obtenemos una nueva tabla que combina las observaciones de ambas, uniendo las filas de la primera tabla (_x_) con las filas de al segunda tabla (_y_) que se correspondan seg칰n la llave en com칰n.



{{< imagen "left_join_b.png" >}}


{{< bajada "Esquema del resultado del _left join_" >}}




## Ejemplo de una uni칩n de tablas en R

Para unir dos tablas en R, usamos la funci칩n `left_join()` de `{dplyr}`.




``` r
library(dplyr)
```



Primero creemos una tabla de base con datos de ejemplo.




``` r
animales_a <- tibble(animal = c("perro", "gato", "pez"),
                     color = c("gris", "negro", "azul"))
```


| animal | color |
|:------:|:-----:|
| perro  | gris  |
|  gato  | negro |
|  pez   | azul  |



En esa tabla tenemos tres observaciones que corresponden a animales, descritos en la primera columna, y una segunda columna con caracter칤sticas de los mismos.

Ahora creemos una segunda tabla, que adem치s de tener la misma columna que describe a los animales, agrega una nueva variable sobre estos animalitos:




``` r
animales_b <- tibble(animal = c("perro", "gato", "pez"),
                     patas = c(4, 3, 0))
```


| animal | patas |
|:------:|:-----:|
| perro  |   4   |
|  gato  |   3   |
|  pez   |   0   |



Dado que ambas tablas comparten la variable `animal`, si hacemos un _left join_ ambas tablas se cruzar치n en base a esta variable, resultando en una tabla nueva:




``` r
animales_2 <- left_join(animales_a, animales_b)
```

```
## Joining with `by = join_by(animal)`
```


| animal | color | patas |
|:------:|:-----:|:-----:|
| perro  | gris  |   4   |
|  gato  | negro |   3   |
|  pez   | azul  |   0   |



El resultado de la uni칩n es una nueva tabla que tiene las tres variables 칰nicas obtenidas del cruce de las dos tablas distintas. En este caso, el _left join_ nos permite agregar informaci칩n sobre una misma unidad de observaci칩n proveniente de distintas fuentes.


## Otro ejemplo

Veamos un segundo ejemplo con m치s filas y m치s columnas:




``` r
animales_x <- tibble(animal = c("gato", "rat칩n", "perro", "pez"),
                     color = c("gris", "negro", "blanco", "azul"),
                     tama침o = c(34, 16, 50, 3))
```


| animal | color  | tama침o |
|:------:|:------:|:------:|
|  gato  |  gris  |   34   |
| rat칩n  | negro  |   16   |
| perro  | blanco |   50   |
|  pez   |  azul  |   3    |


``` r
animales_y <- tibble(animal = c("perro", "gato", "pez"),
                     patas = c(4, 3, 0),
                     edad = c(8, 3, 1))
```


| animal | patas | edad |
|:------:|:-----:|:----:|
| perro  |   4   |  8   |
|  gato  |   3   |  3   |
|  pez   |   0   |  1   |


Las dos tablas que tenemos ahora tienen distinta cantidad de observaciones, y adem치s las observaciones clave (columna `animal`) que se usar치n como llave de uni칩n est치n desordenadas.

En este caso, la primera tabla (`animales_x`) tiene 4 filas, pero la segunda tabla (`animales_y`) tiene menos filas que la primera. En estos casos, el orden de la uni칩n es importante: en un _**left** join_ la primera tabla (o izquierda) es la tabla principal, a la cual se le agregan las columnas de una segunda tabla, en base a las coincidencias de la columna de llave. Por lo tanto, si unimos o cruzamos las tablas poniendo primero la tabla m치s grande y despu칠s la m치s peque침a, obtendremos casos perdidos por las filas de la primera tabla que no obtuvieron coincidencias en la segunda.




``` r
animales_3 <- left_join(animales_x, animales_y)
```

```
## Joining with `by = join_by(animal)`
```


| animal | color  | tama침o | patas | edad |
|:------:|:------:|:------:|:-----:|:----:|
|  gato  |  gris  |   34   |   3   |  3   |
| rat칩n  | negro  |   16   |  NA   |  NA  |
| perro  | blanco |   50   |   4   |  8   |
|  pez   |  azul  |   3    |   0   |  1   |



Como podemos ver, obtenemos celdas con `NA` en la observaci칩n _rat칩n_, debido a que en la segunda tabla (`animales_y`) no hab칤an datos sobre este animalito. Una pena 游땞

Tambi칠n ser칤a una opci칩n hacer el cruce al rev칠s, poniendo primero la tabla `animales_y` (3 filas) y despu칠s `animales_x` (4 filas), con el objetivo de que las observaciones de la tabla `animales_x` complementen las observaciones de `animales_y` donde hayan coincidencias, y descartando los casos que no tienen en com칰n:




``` r
animales_3 <- left_join(animales_y, animales_x)
```

```
## Joining with `by = join_by(animal)`
```


| animal | patas | edad | color  | tama침o |
|:------:|:-----:|:----:|:------:|:------:|
| perro  |   4   |  8   | blanco |   50   |
|  gato  |   3   |  3   |  gris  |   34   |
|  pez   |   0   |  1   |  azul  |   3    |



Ahora no tenemos datos perdidos, porque si bien `animales_x` ten칤a m치s observaciones que `animales_y`, `animales_y` conten칤a todas las observaciones de `animales_x` identificadas por la variable `animal`, lo que podemos confirmar [comparando las diferencias entre ambas columnas con la funci칩n `waldo::compare()`](/blog/diferencias):




``` r
library(waldo)

compare(sort(animales_x$animal), 
        sort(animales_y$animal))
```

```
## `old`: "gato" "perro" "pez" "rat칩n"
## `new`: "gato" "perro" "pez"
```



## Conclusi칩n

Podemos usar `left_join()` para **completar los datos** sobre nuestra unidad de an치lisis si la informaci칩n viene diseminada en distintas tablas o archivos. Pero tambi칠n podemos utilizarla para **complementar datos** desde distintas fuentes, aumentando la informaci칩n que tenemos sobre las observaciones que estemos estudiando, o bien, para realizar **cruces de informaci칩n** que nos entreguen coincidencias relevantes. Un caso ic칩nico de _left join_ fue el [estudio realizado por la Contralor칤a General de la Rep칰blica de Chile](https://www.biobiochile.cl/noticias/nacional/chile/2025/05/20/contraloria-detecta-que-25-mil-funcionarios-publicos-salieron-del-pais-mientras-estaban-con-licencia.shtml), donde se cruzaron dos bases de datos que ten칤an en com칰n la posibilidad de identificar funcionarios p칰blicos:

> Se trata de un estudio a partir del cruce de informaci칩n de las salidas del pa칤s registradas por la Polic칤a de Investigaciones (PDI), la base de funcionarios p칰blicos y las licencias m칠dicas que se otorgaron entre el 2023 y 2024.


