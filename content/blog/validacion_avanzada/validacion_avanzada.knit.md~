---
title: Validaci√≥n de datos con {testthat} y {pointblank}
author: Basti√°n Olea Herrera
date: '2025-10-13'
draft: true
slug: []
categories: []
tags:
  - procesamiento de datos
  - consejos
  - automatizaci√≥n
---




En un [post anterior](/blog/validacion_basica) habl√© sobre c√≥mo hacer validaci√≥n b√°sica de datos en R, creando simples funciones que dentro evaluavan condiciones para validar tus datos, como revisar cantidad de filas, cantidad de datos perdidos, y otros. En este post veremos `{pointblank}`, un **paquete dise√±ado para validaci√≥n de datos**. En unos minutos aprender√°s a usar este paquete para garantizar que tus datos cumplen con tus expectativas de calidad. 

_**¬øPara qu√© sirve la validaci√≥n de datos?**_ Para que, en cualquier punto de tus procesos de an√°lisis de datos, puedas verificar si los datos vienen como esperas, o revisar si es que traen _sorpresas_. Te permite crear pruebas para, por ejemplo, confirmar que una columna no tenga datos perdidos, que los valores de una columna est√©n dentro de un rango esperado, etc√©tera. 





``` r
library(dplyr)

animales <- tribble(~animal,  ~patas, ~lindura,   ~color,
                    "mapache",     4,      100,   "gris",
                    "gato",       80,       90,  "negro",
                    "gallina",     2,       NA, "plumas")
```





A pesar de que se usa en general para el desarrollo de paquetes, y se enfoca a validar que c√°lculos y m√©todos estad√≠sticos funcionen como es esperado, se puede usar igual para an√°lisis de datos.

La idea general es **crear pruebas para cada script** que tenga nuestro proyecto, y **periodicamente ejecutar las pruebas** para confirmar que todo est√© en orden.
`test-{script}.R`

Necesitamos crear una carpeta para los tests, y scripts con tests para cada script que queramos validar. Podemos crear una carpeta para las pruebas con `fs::dir_create()`, y dentro creamos los scripts que necesitemos con `fs::file_create()`, siguiendo la convenci√≥n de anteponer `test` a cada script de pruebas.

Ejemplos de pruebas:




``` r
library(testthat)
```

```
## 
## Attaching package: 'testthat'
```

```
## The following object is masked from 'package:dplyr':
## 
##     matches
```

``` r
test_that("mapache existe",
          expect_true(exists("mapache"))
          )
```

```
## ‚îÄ‚îÄ Failure: mapache existe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
## exists("mapache") is not TRUE
## 
## `actual`:   FALSE
## `expected`: TRUE
```

```
## Error:
## ! Test failed
```

``` r
test_that("numeritos",
          expect_equal(4, 4)
)
```

```
## Test passed üò∏
```

``` r
test_that("tipo texto",
          expect_type("mapache", "character")
)
```

```
## Test passed üòÄ
```




RStudio detecta que se trata de un script de pruebas unitarias, y aparece el bot√≥n _Run Tests_ en la parte superior derecha del script.

Cuando ya tengamos nuestras pruebas, podemos usar `test_file("tests/test-script.R")` para ejecutar las pruebas de un script, o `test_dir("tests.R")` para ejecutar todas las pruebas de la carpeta. Estas funciones que llevar√°n a cabo la validaci√≥n podemos ejecutarlas desde donde m√°s nos resulte conveniente: desde alg√∫n script principal de nuestro proyecto, desde un script `tests.R` espec√≠fico para ejecutar las pruebas, al final de cada script del proyecto, al final de un script donde ejecutemos todo el procesamiento de nuestro proyecto, o manualmente.

Un script que nos ayude a ejecutar las validaciones ser√≠a algo as√≠:















