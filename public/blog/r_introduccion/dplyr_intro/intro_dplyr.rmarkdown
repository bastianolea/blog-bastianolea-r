---
title: "Introducción al manejo de datos con {dplyr}"
author: Bastián Olea Herrera
date: '2025-02-13'
format: 
  hugo-md:
    output-file: "index"
    output-ext:  "md"
weight: 7
draft: false
series: "Introducción a R"
slug: []
categories: ["Tutoriales"]
tags:
  - dplyr
  - consejos
  - datos
lang: es
excerpt: "Luego de haber aprendido las funcionalidades básicas del lenguaje y R, y habernos familiarizado con herramientas un poco más avanzadas de la programación en este lenguaje, ahora podemos aplicar estos aprendizajes a los datos. Aprenderemos a explorar, comprender, y navegar tablas de datos, tanto en la forma nativa de trabajar con R, como con la ayuda del paquete {dplyr}."
execute: 
  error: true
  eval: true
editor_options: 
  chunk_output_type: console
---




Luego de haber aprendido las funcionalidades básicas del lenguaje y R, y habernos familiarizado con herramientas un poco más avanzadas de la programación en este lenguaje, ahora podemos aplicar estos aprendizajes a los datos. Aprenderemos a explorar, comprender, y navegar tablas de datos, tanto en la forma nativa de trabajar con R, como con la ayuda del paquete {dplyr}.


## {dplyr}

<img src = dplyr.png style = "float: left; max-width: 128px; margin-right: 20px;">

La herramienta que utilizaremos para explorar, manipular, y transformar datos será [el paquete `{dplyr}`](https://dplyr.tidyverse.org/articles/dplyr.html). Este paquete, parte central del [conjunto _Tidyverse_ de herramientas para el análisis de datos con R](https://www.tidyverse.org), es uno de los más usados por la comunidad de R por su facilidad de uso. 

Se caracteriza porque casi todas sus funciones son escritas por medio de _verbos_, lo que hace que su sintaxis sea muy legible, ya que cada función se corresponde con una acción que estamos realizando sobre nuestros datos. 

##### Nota sobre el uso de {dplyr}
Probablemente el 98% de las cosas que necesitemos hacer con tablas de datos en R puedan hacerse por medio de {dplyr} y otros paquetes adyacentes a él. En mi opinión esto es bueno, porque creo que {dplyr} hace todo más sencillo, ordenado y fácil de interpretar. Sin embargo, creo que también es importante entender cómo se realizan las operaciones básicas sobre los datos con R base. Esto porque un entendimiento —aunque sea básico— de R base nos va a ayudar a comprender mejor el funcionamiento del lenguaje, y nos puede sacar de posibles problemas que encontremos. Es por esto que en este tutorial iremos viendo cómo realizar las operaciones básicas de manipulación de datos primero con R base y luego con {dplyr}.


### Instalación
Para usar el paquete `{dplyr}`, así como cualquier otro paquete de R que no venga instalado por defecto, tenemos que instalarlo desde internet. La instalación de los paquetes en R se facilita por la función `install.packages()`, que se conecta a un servidor centralizado donde todos los paquetes son revisados y verificados manualmente por revisores humanos, para garantizar que sean seguros de usar y funcionales.

Instalamos `{dplyr}` con el siguiente comando:


```{r}
#| eval: false
install.packages("dplyr")
```



Así como cuando instalamos una aplicación en nuestro celular o computador, solamente necesitamos instalar el paquete una vez. Pero cuando queramos usar el paquete, debemos **cargarlo**, que sería equivalente a abrir una aplicación ya instalada en tu celular o computador.

Para cargar un paquete se utiliza la función `library()`:



```{r}
library("dplyr")
```



Después de cargar un paquete puede ser que aparezcan mensajes en la consola, pero en general podemos ignorarlos.


## Datos

Las tablas de datos, también conocidas como _dataframes_, son formas de almacenar información por medio de filas y columnas. Usualmente, las filas corresponden a observaciones, y las columnas corresponden a variables, pero no siempre esto se cumple. Otra característica de las tablas o _dataframes_ es que son rectangulares: todas las columnas tienen la misma cantidad de filas.

Usemos {dplyr} para tener nuestra primera aproximación a los datos en tablas construyendo una tabla. Cómo planteamos en el primer tutorial, las tablas de datos en R son construidas a partir de vectores, o dicho de otra forma, las columnas de las tablas son vectores. 


### Crear una tabla
Creemos unos vectores y luego hagamos una tabla a partir de ellos:



```{r}
animal <- c("gato", "paloma", "rana", "pollo", "mapache", "serpiente")

tipo <- c("mamífero", "ave", "anfibio", "ave", "mamífero", "reptil")

patas <- c(4, 2, 4, 2, 4, 0)
```



Creamos tres vectores, que serán las columnas de nuestra tabla. Confirmemos que tienen el mismo largo:



```{r}
# confirmar que los tres casos se cumplen
all(length(animal) == 6,
    length(tipo) == 6,
    length(patas) == 6)
```



Ahora, usemos los vectores para crear una tabla con {dplyr}:



```{r}
# crear una tabla con los vectores
tabla <- tibble(animal,
                tipo,
                patas)

tabla
```



Esta es la salida en la consola que tienen los _dataframes_ creados con {dplyr}. En ella, podemos ver en la primera fila de texto en largo y ancho de la tabla (número de filas y columnas). Luego vemos los **nombres** de las tres columnas, y debajo de ellos vemos el **tipo** de cada columna (caracter, caracter y numérico). Las siguientes filas corresponden a los datos mismos de la tabla.

### Explorar una tabla
Exploremos un poco las características de una tabla o _dataframe_:



```{r}
class(tabla)
```



Las tablas creadas con {dplyr} son de la clase `"tbl_df"`, que hace referencia a _tibble,_ el tipo específico de tablas de datos de este paquete, que son más amigables y fáciles de leer.



```{r}
length(tabla)
```



Se consultamos el largo del objeto con `length()`, obtenemos el número de columnas. Si queremos saber el número de filas, usamos `nrow()`:



```{r}
nrow(tabla)
```



Si queremos saber los nombres de las columnas de una tabla, podemos usar `names()`, o bien, la función `glimpse()`, que nos entrega un conveniente _vistazo_ de los datos de nuestra tabla:



```{r}
names(tabla)

glimpse(tabla)
```




### Seleccionar datos

Recordemos que podemos extraer subconjuntos de los vectores usando los corchetes `[]`:



```{r}
animal[5]

animal[4:5]

animal[c(1, 2, 4)]
```



Con los vectores es sencillo, porque un vector es una unidad de datos unidimensional, donde con un número podemos seleccionar cualquiera de los elementos contenidos en el vector.

Las tablas de datos no son unidimensionales, sino **bidimensionales**, dado que tienen filas y columnas. Entonces, para poder extraer elementos de distintas posiciones de una tabla, dentro de los corchetes habrá que indicar sus filas y/o columnas. Tenemos que indicar ya no sólo uno, sino dos argumentos: el primero refiere a las **filas**, y el segundo a las **columnas**.



```{r}
tabla[2, 3]
```



En este caso, extrajimos la observación que se encuentra en la fila `2` y en la columna `3`.

#### Filas

Para extraer una fila de una tabla, dentro de los corchetes debemos indicar la posición de la fila, separado por una coma, y dejar en blanco el segundo argumento, que sería la selección de columnas.



```{r}
tabla[1, ]
```



Indicando sólo el número de fila `1` y dejando en blanco la ubicación de la columna, seleccionamos la fila 1 entera.

También podemos usar la función `slice()` para extraer una fila de una tabla:



```{r}
slice(tabla, 5)
```



#### Columnas

Para extraer una columna, debemos indicar su posición en el segundo argumento dentro de los corchetes, dejando el primero vacío:



```{r}
tabla[, 1]
```



También podemos indicar el nombre de la columna, entre comillas, para seleccionarla:


```{r}
tabla[, "animal"]
```




Puede para ser extraño dejar la coma por sí sola dentro del corchete, así que en su lugar podemos usar la función `select()` para seleccionar columnas:



```{r}
select(tabla, 1)
select(tabla, "tipo")
```



Otra forma de extraer una columna de una tabla de datos es _abrir_ la tabla usando el operador `$`. Al escribir el nombre de la tabla de datos seguido del operador `$`, RStudio sugerirá los nombres de las columnas para que puedas extraerlas:



{{< imagen "dplyr_1.png" >}}


```{r}
tabla$animal
```



A usar el operador `$` para extraer columnas, se obtiene el vector que se usó para crear la columna, así que recibimos los datos en forma de vector.


### Crear columnas

Si queremos agregar una nueva columna a nuestro _dataframe_, tenemos que hacer una mezcla entre la extracción de columnas con el operador `$` y la asignación de nuevos objetos: 

Si intentamos extraer una columna que no existe, recibimos un error:


```{r}
tabla$habitat
```



Sin embargo, si creamos un vector encima de esta columna que aún no existe, ésta se crea:


```{r}
tabla$habitat <- c("urbano", "urbano", "rural", "rural", "urbano", "rural")

tabla
```



En otras palabras, para crear una nueva columna simplemente especificamos su nombre como parte de la tabla existente, y asignamos los datos que queremos que se contengan en esta nueva columna.

Otra forma de crear columnas es con la función `mutate()`, que nos permite crear o modificar columnas existentes:



```{r}
mutate(tabla, cola = c("sí", "sí", "no", "no", "sí", "toda"))
```



La diferencia es que con `mutate()` solamente estamos previsualizando el cambio, dado que no hemos asignado nada. Si queremos que la columna realmente se guarde en el _dataframe_, debemos asignar el resultado a un objeto nuevo, o sobreescribir el actual.



### Filtrar datos



```{r}
tabla[tabla$animal == "mapache", ]

tabla[tabla$patas > 2, ]

subset(tabla, patas > 2)

subset(tabla, animal == "mapache")
```

```{r}
tribble(~días,    ~n, ~caso,
        "jueves",  0,  1,
        "viernes", 4,  0,
        "sábado",  2,  1,
        )
```





_En construcción..._




{{< cafecito >}}

